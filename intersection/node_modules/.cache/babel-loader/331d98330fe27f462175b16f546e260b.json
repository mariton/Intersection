{"ast":null,"code":"import { select } from 'd3-selection';\nimport { scaleLinear } from 'd3-scale';\nimport { axisBottom, axisLeft } from 'd3-axis';\n\nclass ThePattern {\n  constructor(domNodeCurrent) {\n    this.init = (data, dims) => {\n      this.setDims(dims); //<-----one\n\n      this.setScales(); //<-------two\n\n      this.chart = this.svg.append('g');\n      this.chart.attr('transform', \"translate(\".concat(this.margin.left, \", \").concat(this.margin.top, \")\"));\n      this.chart.append('text').text(\"height: \".concat(dims.height));\n      this.createAxes(); //<-----three\n\n      this.updateData(data);\n    };\n\n    this.setDims = dims => {\n      this.dims = dims;\n      this.innerHeight = this.dims.height - (this.margin.top + this.margin.bottom);\n      this.innerWidth = this.dims.width - (this.margin.left + this.margin.right);\n    };\n\n    this.setScales = () => {\n      this.xScale = scaleLinear().domain([0, 9]).range([0, this.innerWidth]);\n      this.yScale = scaleLinear().domain([0, 10]).range([this.innerHeight, 0]);\n    };\n\n    this.createAxes = () => {\n      this.scaleAxes();\n      this.xAxisBottomG = this.chart.append('g').attr('transform', \"translate(0, \".concat(this.innerHeight, \")\")).call(this.xAxisBottom);\n      this.yAxisLeftG = this.svg.append('g').attr('transform', \"translate(\".concat(this.margin.left, \", \").concat(this.margin.top, \")\")).call(this.yAxisLeft);\n    };\n\n    this.scaleAxes = () => {\n      this.xAxisBottom = axisBottom().scale(this.xScale).tickSize(-this.innerHeight);\n      this.yAxisLeft = axisLeft().scale(this.yScale).tickSize(-this.innerWidth);\n    };\n\n    this.updateData = data => {\n      this.data = data;\n      this.circles = this.chart.selectAll('.myCircle').data(this.data);\n      this.circles.enter().append('circle').attr('class', 'myCircle').attr('r', 10).attr('cx', (d, i) => this.xScale(i)).attr('cy', d => this.yScale(d)).attr('fill', 'green');\n    };\n\n    this.updateDims = dims => {};\n\n    this.svg = select(domNodeCurrent).append('svg');\n    this.svg.attr('width', '100%').attr('height', '100%');\n    this.svg.style('background-color', 'red');\n    this.margin = {\n      top: 20,\n      left: 30,\n      bottom: 20,\n      right: 30\n    };\n  }\n\n}\n\n;\nexport default ThePattern;","map":{"version":3,"sources":["/Users/marinas/WORK/GIT/ReactD3-projects/my-app/src/ThePattern.js"],"names":["select","scaleLinear","axisBottom","axisLeft","ThePattern","constructor","domNodeCurrent","init","data","dims","setDims","setScales","chart","svg","append","attr","margin","left","top","text","height","createAxes","updateData","innerHeight","bottom","innerWidth","width","right","xScale","domain","range","yScale","scaleAxes","xAxisBottomG","call","xAxisBottom","yAxisLeftG","yAxisLeft","scale","tickSize","circles","selectAll","enter","d","i","updateDims","style"],"mappings":"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","sourcesContent":["import { select } from 'd3-selection';\nimport { scaleLinear } from 'd3-scale';\nimport { axisBottom, axisLeft } from 'd3-axis';\nclass ThePattern {\n  constructor(domNodeCurrent){\n    this.svg = select(domNodeCurrent).append('svg');\n    this.svg.attr('width', '100%').attr('height', '100%');\n    this.svg.style('background-color', 'red');\n    this.margin = { top: 20, left: 30, bottom: 20, right: 30 };\n  };\n  init=(data, dims)=>{\n    this.setDims(dims); //<-----one\n    this.setScales(); //<-------two\n    this.chart = this.svg.append('g');\n    this.chart.attr('transform', `translate(${this.margin.left}, ${this.margin.top})`);\n    this.chart.append('text').text(`height: ${dims.height}`);\n    this.createAxes();//<-----three\n    this.updateData(data);\n  };\n  // first; set up initial dimensions.\n  setDims=(dims)=>{\n    this.dims = dims;\n    this.innerHeight = \n        this.dims.height-(this.margin.top+this.margin.bottom);\n    this.innerWidth = \n        this.dims.width-(this.margin.left+this.margin.right);\n  };\n  // second; set up scales using new dims\n  setScales=()=>{\n    this.xScale =\n      scaleLinear()\n        .domain([0, 9])\n        .range([0, this.innerWidth])\n    this.yScale =\n      scaleLinear()\n        .domain([0, 10])\n        .range([this.innerHeight, 0])\n  };\n  // third; create axis groups using the following methods.\n  createAxes=()=>{\n    this.scaleAxes();\n    this.xAxisBottomG =\n      this.chart.append('g')\n        .attr('transform', `translate(0, ${this.innerHeight})`)\n        .call(this.xAxisBottom)\n    this.yAxisLeftG =\n      this.svg.append('g')\n        .attr('transform', `translate(${this.margin.left}, ${this.margin.top})`)\n        .call(this.yAxisLeft)\n  };\n  scaleAxes=()=>{\n    this.xAxisBottom =\n      axisBottom()\n        .scale(this.xScale)\n        .tickSize(-this.innerHeight)\n    this.yAxisLeft =\n      axisLeft()\n        .scale(this.yScale)\n        .tickSize(-this.innerWidth)\n  };\n  updateData=(data)=>{\n    this.data = data;\n    this.circles = \n      this.chart.selectAll('.myCircle').data(this.data);\n    this.circles\n      .enter().append('circle')\n        .attr('class', 'myCircle')\n        .attr('r', 10)\n        .attr('cx', (d, i)=>this.xScale(i))\n        .attr('cy', (d)=>this.yScale(d))\n        .attr('fill', 'green')\n  };\n  updateDims=(dims)=>{\n  };\n};\nexport default ThePattern;"]},"metadata":{},"sourceType":"module"}