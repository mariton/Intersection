{"ast":null,"code":"import 'd3-selection';\nimport 'd3-transition';\n\nclass Intersection {\n  constructor(chart, data, scales, dims) {\n    this.enter = () => {\n      //to add ticks step or x values array len instead of the 8 in  this.dims.innerHeight/8\n      this.allIntersection.enter().append('path').attr(\"d\", symbol().type(\"triangle-up\").size(500)).attr(\"transform\", function (d) {\n        return \"translate(\" + 100 + \",\" + 100 + \")\";\n      }).style(\"fill\", \"red\"); // .append('rect')\n      // .attr('class', 'intersection')\n      // .attr('x', (d,i)=>{return this.scales.xScale(d[\"column\"],d[\"rowKey\"])-this.dims.innerHeight/10})\n      //      \t.attr('y', (d)=>this.scales.yScale(d[\"rowKey\"]) + 20)\n      //      \t.attr('fill', (d) => d[\"color\"])\n\n      this.allIntersection.enter().append('text').attr('class', 'intersection').text('!').attr('x', (d, i) => {\n        return this.scales.xScale(d[\"column\"], d[\"rowKey\"]) - this.dims.innerHeight / 12;\n      }).attr('y', d => this.scales.yScale(d[\"rowKey\"]) + 35);\n      console.log(\"dims\", this.dims);\n    };\n\n    this.updateData = newData => {\n      this.data = newData;\n      this.allIntersection = this.chart.selectAll('.intersection').data(this.data);\n      this.allIntersection.transition().duration(1000).attr('x', (d, i) => this.scales.xScale(d[\"column\"], d[\"rowKey\"])).attr('y', d => this.scales.yScale(d[\"rowKey\"])).attr('fill', d => d[\"color\"]);\n      this.enter();\n    };\n\n    this.exit = () => {\n      this.allIntersection.exit().remove();\n    };\n\n    this.chart = chart;\n    this.scales = scales;\n    this.dims = dims;\n    this.updateData(data);\n  }\n\n}\n\nexport default Intersection;","map":{"version":3,"sources":["/Users/marinas/WORK/GIT/ReactD3-projects/React-projects/size_matrix/src/matrix/utilities/Intersection.js"],"names":["Intersection","constructor","chart","data","scales","dims","enter","allIntersection","append","attr","symbol","type","size","d","style","text","i","xScale","innerHeight","yScale","console","log","updateData","newData","selectAll","transition","duration","exit","remove"],"mappings":"AAAA,OAAQ,cAAR;AACA,OAAO,eAAP;;AAEA,MAAMA,YAAN,CAAmB;AAClBC,EAAAA,WAAW,CAACC,KAAD,EAAQC,IAAR,EAAcC,MAAd,EAAqBC,IAArB,EAA0B;AAAA,SAOrCC,KAPqC,GAO/B,MAAI;AACT;AACA,WAAKC,eAAL,CAAqBD,KAArB,GACEE,MADF,CACS,MADT,EAEKC,IAFL,CAEU,GAFV,EAEeC,MAAM,GAAGC,IAAT,CAAc,aAAd,EAA6BC,IAA7B,CAAkC,GAAlC,CAFf,EAGKH,IAHL,CAGU,WAHV,EAGuB,UAASI,CAAT,EAAY;AAAE,eAAO,eAAe,GAAf,GAAqB,GAArB,GAA2B,GAA3B,GAAiC,GAAxC;AAA8C,OAHnF,EAIKC,KAJL,CAIW,MAJX,EAImB,KAJnB,EAFS,CAOR;AACA;AACA;AACA;AACA;;AAEK,WAAKP,eAAL,CAAqBD,KAArB,GACJE,MADI,CACG,MADH,EAEJC,IAFI,CAEC,OAFD,EAEU,cAFV,EAGCM,IAHD,CAGM,GAHN,EAICN,IAJD,CAIM,GAJN,EAIW,CAACI,CAAD,EAAGG,CAAH,KAAO;AAAC,eAAO,KAAKZ,MAAL,CAAYa,MAAZ,CAAmBJ,CAAC,CAAC,QAAD,CAApB,EAA+BA,CAAC,CAAC,QAAD,CAAhC,IAA4C,KAAKR,IAAL,CAAUa,WAAV,GAAsB,EAAzE;AAA4E,OAJ/F,EAKET,IALF,CAKO,GALP,EAKaI,CAAD,IAAK,KAAKT,MAAL,CAAYe,MAAZ,CAAmBN,CAAC,CAAC,QAAD,CAApB,IAAkC,EALnD;AAMAO,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoB,KAAKhB,IAAzB;AAEN,KA5BoC;;AAAA,SA6BrCiB,UA7BqC,GA6BzBC,OAAD,IAAW;AAClB,WAAKpB,IAAL,GAAYoB,OAAZ;AAEA,WAAKhB,eAAL,GACE,KAAKL,KAAL,CAAWsB,SAAX,CAAqB,eAArB,EAAsCrB,IAAtC,CAA2C,KAAKA,IAAhD,CADF;AAEA,WAAKI,eAAL,CAAqBkB,UAArB,GAAkCC,QAAlC,CAA2C,IAA3C,EACDjB,IADC,CACI,GADJ,EACS,CAACI,CAAD,EAAGG,CAAH,KAAO,KAAKZ,MAAL,CAAYa,MAAZ,CAAmBJ,CAAC,CAAC,QAAD,CAApB,EAA+BA,CAAC,CAAC,QAAD,CAAhC,CADhB,EAEKJ,IAFL,CAEU,GAFV,EAEgBI,CAAD,IAAK,KAAKT,MAAL,CAAYe,MAAZ,CAAmBN,CAAC,CAAC,QAAD,CAApB,CAFpB,EAGKJ,IAHL,CAGU,MAHV,EAGmBI,CAAD,IAAOA,CAAC,CAAC,OAAD,CAH1B;AAIA,WAAKP,KAAL;AACH,KAvCoC;;AAAA,SAwCrCqB,IAxCqC,GAwChC,MAAI;AACR,WAAKpB,eAAL,CAAqBoB,IAArB,GAA4BC,MAA5B;AACA,KA1CoC;;AACjC,SAAK1B,KAAL,GAAaA,KAAb;AACA,SAAKE,MAAL,GAAcA,MAAd;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKiB,UAAL,CAAgBnB,IAAhB;AACH;;AANiB;;AAgDnB,eAAeH,YAAf","sourcesContent":["import  'd3-selection';\nimport 'd3-transition';\n\nclass Intersection {\n\tconstructor(chart, data, scales,dims){\n\t    this.chart = chart;\n\t    this.scales = scales;\n\t    this.dims = dims;\n\t    this.updateData(data);\n\t};\n\n\tenter=()=>{\n\t\t//to add ticks step or x values array len instead of the 8 in  this.dims.innerHeight/8\n\t\tthis.allIntersection.enter()\n\t\t\t.append('path')\n\t\t    .attr(\"d\", symbol().type(\"triangle-up\").size(500))\n\t\t    .attr(\"transform\", function(d) { return \"translate(\" + 100 + \",\" + 100 + \")\"; })\n\t\t    .style(\"fill\", \"red\");\n\t\t\t// .append('rect')\n\t\t\t// .attr('class', 'intersection')\n\t\t\t// .attr('x', (d,i)=>{return this.scales.xScale(d[\"column\"],d[\"rowKey\"])-this.dims.innerHeight/10})\n   //      \t.attr('y', (d)=>this.scales.yScale(d[\"rowKey\"]) + 20)\n   //      \t.attr('fill', (d) => d[\"color\"])\n\n        this.allIntersection.enter()\n\t\t\t.append('text')\n\t\t\t.attr('class', 'intersection')\n\t      \t.text('!')\n\t      \t.attr('x', (d,i)=>{return this.scales.xScale(d[\"column\"],d[\"rowKey\"])-this.dims.innerHeight/12})\n        \t.attr('y', (d)=>this.scales.yScale(d[\"rowKey\"]) + 35)\n        console.log(\"dims\", this.dims)\n\n\t};\n\tupdateData=(newData)=>{\n\t    this.data = newData;\n\n\t    this.allIntersection =\n\t      this.chart.selectAll('.intersection').data(this.data);\n\t    this.allIntersection.transition().duration(1000)\n\t\t\t.attr('x', (d,i)=>this.scales.xScale(d[\"column\"],d[\"rowKey\"]))\n        \t.attr('y', (d)=>this.scales.yScale(d[\"rowKey\"]))\n\t        .attr('fill', (d) => d[\"color\"])\n\t    this.enter();\n\t};\n\texit=()=>{\n\t\tthis.allIntersection.exit().remove();\n\t};\n\n\n}\n\nexport default Intersection;"]},"metadata":{},"sourceType":"module"}