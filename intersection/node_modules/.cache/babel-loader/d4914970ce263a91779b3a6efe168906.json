{"ast":null,"code":"var _jsxFileName = \"/Users/marinas/WORK/GIT/ReactD3-projects/React-projects/size_matrix/src/matrix/Matrix.js\";\nimport React from 'react';\nimport { select } from 'd3-selection';\nimport { Dimensions, Scales, Axes, Square, XAxis, YAxis } from './utilities';\nimport * as R from 'ramda';\n\nconst xAxis = items => {\n  const xScaleKey = 'column';\n  const getXLabels = R.pipe(R.flatten, R.sortBy(R.prop(xScaleKey)), R.map(R.prop(xScaleKey)), R.uniq);\n  const xLabels = getXLabels(items);\n  return xLabels;\n};\n\nconst yAxis = items => {\n  const getYLabels = R.pipe(R.flatten, R.uniq);\n  const yLabels = getYLabels(items);\n  return yLabels.sort();\n};\n\nclass Matrix extends React.Component {\n  constructor(domNodeCurrent) {\n    console.log(domNodeCurrent);\n    this.svg = select(domNodeCurrent).append('svg');\n    this.svg.attr('width', '100%').attr('height', '100%');\n  }\n\n  renderSquare(item, className = \"square\") {\n    return React.createElement(Square, {\n      item: item,\n      className: className,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    });\n  }\n\n  renderxAxis(item, className = \"xAxis\") {\n    return React.createElement(XAxis, {\n      item: item,\n      className: className,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    });\n  }\n\n  renderyAxis(item, className = \"yAxis\") {\n    return React.createElement(YAxis, {\n      item: item,\n      className: className,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    });\n  }\n\n  getDatasource(dataRaw) {\n    return dataRaw.map(ds => ds.data);\n  }\n\n  render() {\n    var dsItems = this.getDatasource(this.props.data);\n    this.init(this.getDatasource(this.props.data), {\n      width: 500,\n      height: 500\n    });\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"board-column-axis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, R.map(this.renderxAxis, yAxis(dsItems.map(row => row.map(rowItems => rowItems.rowKey))))), React.createElement(\"div\", {\n      className: \"matrix\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, dsItems.map(rowItems => rowItems.map(row => React.createElement(\"div\", {\n      className: \"board-row\",\n      key: row.uniqueId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, R.map(this.renderSquare, row.items))))), React.createElement(\"div\", {\n      className: \"board-row-axis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, this.renderSquare([], \"squareInvisible\"), R.map(this.renderxAxis, xAxis(dsItems.map(row => row.map(rowItems => rowItems.items))))));\n  }\n\n}\n\n;\nexport default Matrix;","map":{"version":3,"sources":["/Users/marinas/WORK/GIT/ReactD3-projects/React-projects/size_matrix/src/matrix/Matrix.js"],"names":["React","select","Dimensions","Scales","Axes","Square","XAxis","YAxis","R","xAxis","items","xScaleKey","getXLabels","pipe","flatten","sortBy","prop","map","uniq","xLabels","yAxis","getYLabels","yLabels","sort","Matrix","Component","constructor","domNodeCurrent","console","log","svg","append","attr","renderSquare","item","className","renderxAxis","renderyAxis","getDatasource","dataRaw","ds","data","render","dsItems","props","init","width","height","row","rowItems","rowKey","uniqueId"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { select } from 'd3-selection';\nimport { Dimensions, Scales, Axes, Square , XAxis, YAxis} from './utilities';\nimport * as R from 'ramda';\n\nconst xAxis = (items) => {\n\tconst xScaleKey = 'column';\n\n\tconst getXLabels = R.pipe(\n\t\tR.flatten,\n\t\tR.sortBy(R.prop(xScaleKey)),\n\t\tR.map(R.prop(xScaleKey)),\n\t\tR.uniq\n\t\t)\n\n\tconst xLabels = getXLabels(items);\n\treturn xLabels;\n};\nconst yAxis = (items) => {\n\n\tconst getYLabels = R.pipe(\n\t\tR.flatten,\n\t\tR.uniq\n\t\t)\n\n\tconst yLabels = getYLabels(items)\n\treturn yLabels.sort();\n};\n\nclass Matrix extends React.Component {\n\tconstructor(domNodeCurrent) {\n\t\tconsole.log(domNodeCurrent);\n\t\tthis.svg = select(domNodeCurrent).append('svg');\n    \tthis.svg.attr('width', '100%').attr('height', '100%');\n\t};\n\tinit=(data, dims)=>{\n\t    this.data = data;\n\t    console.log(\"data\",this.data)\n\t    //set chart dimensions\n\t    this.dims = new Dimensions(dims);\n\t    console.log(\"dims\", this.dims);\n\t    //create chart \n\t    this.chart = this.svg.append('g');\n\t    this.chart.attr('transform', `translate(${this.dims.margin.left}, ${this.dims.margin.top})`);\n\n\t    //get xLabels and yLabels from data\n\t    var dsItems = this.getDatasource(this.props.data)\n\t   \tthis.xLabels = xAxis(dsItems.map(row => (row.map(rowItems => (rowItems.items)))));\n\t   \tthis.yLabels = yAxis(dsItems.map(row => (row.map(rowItems => (rowItems.rowKey)))));\n\n\t    //set scales from data, xLabels and yLabels\n\t    this.scales = new Scales(this.xLabels, this.yLabels, this.dims);//\n\t    this.axes = new Axes(this.chart, this.scales, this.dims);\n\t   // this.circles = new Circles(this.chart, this.data, this.scales);\n\t  // this.updateData(data);//<--- commented out; now redundant!!\n\n\t};\n\trenderSquare(item, className=\"square\") {\n\t\treturn <Square item={item} className = {className} />;\n\t};\n\trenderxAxis(item, className=\"xAxis\") {\n\t\treturn <XAxis item={item} className = {className} />;\n\t};\n\trenderyAxis(item, className=\"yAxis\") {\n\t\treturn <YAxis item={item} className = {className} />;\n\t};\n\t\n\n\tgetDatasource(dataRaw) {\n\t\t\n\t\treturn dataRaw.map(ds => (ds.data))\n\t}\n\n\trender() {\n\t\tvar dsItems = this.getDatasource(this.props.data)\n\t\tthis.init(this.getDatasource(this.props.data), {width:500,height:500});\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"board-column-axis\">\n\t\t\t\t\t{ R.map(this.renderxAxis, yAxis(dsItems.map(row => (row.map(rowItems => (rowItems.rowKey))))))}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"matrix\">\n\t\t\t\t\t{\n\t\t\t\t\t\tdsItems.map(rowItems => (rowItems.map(row => (\n\t\t\t\t\t\t\t<div className=\"board-row\" key={row.uniqueId}>\n\t\t\t\t\t\t\t\t{R.map(this.renderSquare, row.items)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))))\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row-axis\">\n\t\t\t\t\t{this.renderSquare([], \"squareInvisible\")}\n\t\t\t\t\t{ R.map(this.renderxAxis, xAxis(dsItems.map(row => (row.map(rowItems => (rowItems.items))))))}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\n\t\t\n\t};\n};\nexport default Matrix;"]},"metadata":{},"sourceType":"module"}