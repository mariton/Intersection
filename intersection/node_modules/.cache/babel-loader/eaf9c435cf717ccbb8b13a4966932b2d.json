{"ast":null,"code":"import 'd3-selection';\nimport 'd3-transition';\nimport * as d3 from 'd3';\nimport d3Tip from 'd3-tip';\nimport { tip } from '../functions';\n\nclass Circles {\n  constructor(chart, data, scales) {\n    this.updateData = newData => {\n      this.data = newData;\n      this.allCircles = this.chart.selectAll('.myCircle').data(this.data);\n      this.allCircles.attr('cx', (d, i) => this.scales.xScale(d.x, d.y)).attr('cy', d => this.scales.yScale(d.y)).attr('fill', d => d.color).on('mouseover', tip.show).on('mouseout', tip.hide);\n      this.enter();\n    };\n\n    this.enter = () => {\n      this.allCircles.enter().append('circle').attr('class', 'myCircle').attr('cx', (d, i) => this.scales.xScale(d.x, d.y)).attr('cy', d => this.scales.yScale(d.y)).attr('r', d => d.value * 3).attr('fill', d => d.color).attr(\"opacity\", 0.8).call(tip).on(\"mouseover\", tip.show).on('mouseout', tip.hide);\n      this.exit();\n    };\n\n    this.exit = () => {\n      this.allCircles.exit().remove();\n    };\n\n    this.updateScales = newScales => {\n      this.scales = newScales;\n      this.allCircles = this.chart.selectAll('.myCircle').prototype.transition().duration(500).attr('cx', (d, i) => this.scales.xScale(d.x, d.y)).attr('cy', d => this.scales.yScale(d.y));\n    };\n\n    this.chart = chart;\n    this.scales = scales;\n    this.updateData(data);\n  }\n\n}\n\n;\nexport default Circles;","map":{"version":3,"sources":["/Users/marinas/WORK/GIT/ReactD3-projects/React-projects/size_matrix/src/matrix/utilities/Circles.js"],"names":["d3","d3Tip","tip","Circles","constructor","chart","data","scales","updateData","newData","allCircles","selectAll","attr","d","i","xScale","x","y","yScale","color","on","show","hide","enter","append","value","call","exit","remove","updateScales","newScales","prototype","transition","duration"],"mappings":"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","sourcesContent":["import  'd3-selection';\nimport 'd3-transition';\nimport * as d3 from 'd3'\nimport d3Tip from 'd3-tip';\n\nimport { tip} from '../functions';\n\nclass Circles {\n  constructor(chart, data, scales){\n    this.chart = chart;\n    this.scales = scales;\n    this.updateData(data);\n  };\n\n  updateData=(newData)=>{\n    this.data = newData;\n\n    this.allCircles =\n      this.chart.selectAll('.myCircle').data(this.data);\n    this.allCircles\n        .attr('cx', (d,i)=>this.scales.xScale(d.x,d.y))\n        .attr('cy', (d)=>this.scales.yScale(d.y))\n        .attr('fill', (d) => d.color)\n        .on('mouseover', tip.show)\n        .on('mouseout', tip.hide)\n    this.enter();\n  };\n  enter=()=>{\n\n    this.allCircles.enter()\n        .append('circle')\n        .attr('class', 'myCircle')\n        .attr('cx', (d,i)=>this.scales.xScale(d.x,d.y))\n        .attr('cy', (d)=>this.scales.yScale(d.y))\n        .attr('r', (d) => d.value*3)\n        .attr('fill', (d) => d.color)\n        .attr(\"opacity\", 0.8)\n        .call(tip)\n        .on(\"mouseover\", tip.show)\n        .on('mouseout', tip.hide)\n\n        \n    this.exit();\n  };\n  exit=()=>{\n    this.allCircles.exit().remove();\n  };\n  updateScales=(newScales)=>{\n    this.scales = newScales;\n    this.allCircles =\n      this.chart.selectAll('.myCircle')\n        .prototype.transition().duration(500)\n          .attr('cx', (d,i)=>this.scales.xScale(d.x,d.y))\n          .attr('cy', (d)=>this.scales.yScale(d.y))\n  };\n};\nexport default Circles;"]},"metadata":{},"sourceType":"module"}