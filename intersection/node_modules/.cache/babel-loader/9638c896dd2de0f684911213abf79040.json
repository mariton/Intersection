{"ast":null,"code":"import 'd3-selection';\nimport 'd3-transition';\nimport * as d3 from 'd3';\nimport d3Tip from 'd3-tip';\nconst tip = d3Tip().attr('class', 'd3-tip').offset([-10, 0]).html(function (d) {\n  return \"<div class='d3-tip'>\" + \"<table>\" + \"<tr><th>Size</th><th>Quantity</th></tr>\" + \"<tr><td>\" + d[\"rowKey\"] + d[\"column\"] + \"</td><td>\" + d[\"value\"] + \"</td></tr>\" + \"</table>\" + \"</div>\";\n});\n\nclass Circles {\n  constructor(chart, data, scales) {\n    this.updateData = newData => {\n      this.data = newData;\n      this.allCircles = this.chart.selectAll('.myCircle').data(this.data);\n      this.allCircles.attr('cx', (d, i) => this.scales.xScale(d[\"column\"], d[\"rowKey\"])).attr('cy', d => this.scales.yScale(d[\"rowKey\"])).attr('fill', d => d.color).on('mouseover', tip.show).on('mouseout', tip.hide);\n      this.enter();\n    };\n\n    this.enter = () => {\n      this.allCircles.enter().append('circle').attr('class', 'myCircle').attr('cx', (d, i) => this.scales.xScale(d[\"column\"], d[\"rowKey\"])).attr('cy', d => this.scales.yScale(d[\"rowKey\"])).attr('r', d => d.value).attr('fill', d => d.color).attr(\"opacity\", 0.8).call(tip).on(\"mouseover\", tip.show).on('mouseout', tip.hide);\n      this.exit();\n    };\n\n    this.exit = () => {\n      this.allCircles.exit().remove();\n    };\n\n    this.updateScales = newScales => {\n      this.scales = newScales;\n      this.allCircles = this.chart.selectAll('.myCircle').prototype.transition().duration(500).attr('cx', (d, i) => this.scales.xScale(d[\"column\"], d[\"rowKey\"])).attr('cy', d => this.scales.yScale(d[\"rowKey\"]));\n    };\n\n    this.chart = chart;\n    this.scales = scales;\n    this.updateData(data);\n  }\n\n}\n\n;\nexport default Circles;","map":{"version":3,"sources":["/Users/marinas/WORK/GIT/ReactD3-projects/React-projects/size_matrix/src/matrix/utilities/Circles.js"],"names":["d3","d3Tip","tip","attr","offset","html","d","Circles","constructor","chart","data","scales","updateData","newData","allCircles","selectAll","i","xScale","yScale","color","on","show","hide","enter","append","value","call","exit","remove","updateScales","newScales","prototype","transition","duration"],"mappings":"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","sourcesContent":["import  'd3-selection';\nimport 'd3-transition';\nimport * as d3 from 'd3'\nimport d3Tip from 'd3-tip';\n\nconst tip = d3Tip().attr('class', 'd3-tip')\n  .offset([-10, 0])\n  .html(function(d) {\n    return \"<div class='d3-tip'>\" +\n            \"<table>\" +\n            \"<tr><th>Size</th><th>Quantity</th></tr>\" +\n            \"<tr><td>\"+ d[\"rowKey\"] + d[\"column\"] +\"</td><td>\" + d[\"value\"]+ \"</td></tr>\" +\n            \"</table>\" +\n            \"</div>\" ;\n  })\n\n\nclass Circles {\n  constructor(chart, data, scales){\n    this.chart = chart;\n    this.scales = scales;\n    this.updateData(data);\n  };\n\n  updateData=(newData)=>{\n    this.data = newData;\n\n    this.allCircles =\n      this.chart.selectAll('.myCircle').data(this.data);\n    this.allCircles\n        .attr('cx', (d,i)=>this.scales.xScale(d[\"column\"],d[\"rowKey\"]))\n        .attr('cy', (d)=>this.scales.yScale(d[\"rowKey\"]))\n        .attr('fill', (d) => d.color)\n        .on('mouseover', tip.show)\n        .on('mouseout', tip.hide)\n    this.enter();\n  };\n  enter=()=>{\n\n    this.allCircles.enter()\n        .append('circle')\n        .attr('class', 'myCircle')\n        .attr('cx', (d,i)=>this.scales.xScale(d[\"column\"],d[\"rowKey\"]))\n        .attr('cy', (d)=>this.scales.yScale(d[\"rowKey\"]))\n        .attr('r', (d) => d.value)\n        .attr('fill', (d) => d.color)\n        .attr(\"opacity\", 0.8)\n        .call(tip)\n        .on(\"mouseover\", tip.show)\n        .on('mouseout', tip.hide)\n\n        \n    this.exit();\n  };\n  exit=()=>{\n    this.allCircles.exit().remove();\n  };\n  updateScales=(newScales)=>{\n    this.scales = newScales;\n    this.allCircles =\n      this.chart.selectAll('.myCircle')\n        .prototype.transition().duration(500)\n          .attr('cx', (d,i)=>this.scales.xScale(d[\"column\"],d[\"rowKey\"]))\n          .attr('cy', (d)=>this.scales.yScale(d[\"rowKey\"]))\n  };\n};\nexport default Circles;"]},"metadata":{},"sourceType":"module"}