{"ast":null,"code":"import React from 'react';\nimport { select } from 'd3-selection';\nimport { Dimensions, Scales, Axes, Circles, Intersection, Title } from './utilities';\nimport Legend from './Legend';\nimport { getDatasource, xAxis, yAxis, setAttributes, normalize, intersections, setLegendAttributes, defaultColor, getUniqValues } from './functions';\nimport * as R from 'ramda';\n\nclass Matrix extends React.Component {\n  constructor(domNodeCurrent, options) {\n    super(domNodeCurrent, options);\n\n    this.init = (data, dims) => {\n      this.data = data; //set chart dimensions\n\n      this.dims = new Dimensions(dims); //create chart \n\n      this.chart = this.svg.append('g');\n      this.chart.attr('transform', \"translate(\".concat(this.dims.margin.left, \", \").concat(this.dims.margin.top, \")\")); //add Title to chart\n\n      this.title = new Title(this.chart, this.options.titleSettings, this.dims); //get xLabels and yLabels from data\n\n      const dsItems = getDatasource(this.data);\n      this.xLabels = xAxis(dsItems.map(row => row.map(rowItems => rowItems.items)));\n      this.yLabels = yAxis(dsItems.map(row => row.map(rowItems => rowItems.y))); //set colors for different products\n\n      var dsItemsWcolors = setAttributes(data); //set scales from data, xLabels and yLabels\n\n      this.scales = new Scales(this.xLabels, this.yLabels, this.dims, this.valuesRadius); //Add Axis to chart\n\n      this.axes = new Axes(this.chart, this.scales, this.dims, this.options.chartSettings); //draw Circles/Squares of data\n\n      var circlesData = dsItemsWcolors !== undefined ? normalize(dsItemsWcolors) : normalize(dsItems);\n      this.circles = new Circles(this.chart, circlesData, this.scales, this.dims); //draw Intersections of data\n\n      var intersectionData = R.pipe(R.unnest, R.map(row => R.assoc('color', defaultColor(this.options.legendSettings.colorIntersection, 'intersection').intersection, row)), R.map(row => R.assoc('title', this.options.tooltipSettings.title, row)), R.values)(intersections(circlesData));\n      this.intersections = new Intersection(this.chart, getUniqValues(intersectionData), this.scales, this.dims); //add Legend to chart\n\n      var legendData = setLegendAttributes(this.data, this.options.legendSettings.category);\n      if (this.options.legendSettings.visible) this.legend = new Legend(this.chart, this.options.legendSettings, this.dims, legendData);\n    };\n\n    this.updateData = (data, dims) => {\n      this.circles.updateData(data, dims);\n    };\n\n    this.updateDims = dims => {\n      this.dims.setDims(dims);\n      this.scales.setScales(this.xLabels, this.yLabels, this.dims);\n      this.axes.exit();\n      this.axes.updateAxes(this.scales, this.dims);\n      this.intersections.updateScales(this.scales);\n      this.circles.updateScales(this.scales, this.dims);\n      this.legend.updateScales(this.scales, this.dims);\n    };\n\n    this.options = options;\n    this.svg = select(domNodeCurrent).append('svg');\n    this.svg.attr('width', '100%').attr('height', '100%');\n  }\n\n}\n\n;\nexport default Matrix;","map":{"version":3,"sources":["/Users/marinas/WORK/GIT/ReactD3-projects/React-projects/size_matrix/src/matrix/Matrix.js"],"names":["React","select","Dimensions","Scales","Axes","Circles","Intersection","Title","Legend","getDatasource","xAxis","yAxis","setAttributes","normalize","intersections","setLegendAttributes","defaultColor","getUniqValues","R","Matrix","Component","constructor","domNodeCurrent","options","init","data","dims","chart","svg","append","attr","margin","left","top","title","titleSettings","dsItems","xLabels","map","row","rowItems","items","yLabels","y","dsItemsWcolors","scales","valuesRadius","axes","chartSettings","circlesData","undefined","circles","intersectionData","pipe","unnest","assoc","legendSettings","colorIntersection","intersection","tooltipSettings","values","legendData","category","visible","legend","updateData","updateDims","setDims","setScales","exit","updateAxes","updateScales"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { select } from 'd3-selection';\nimport { Dimensions, Scales, Axes, Circles,Intersection, Title} from './utilities';\nimport Legend from './Legend';\n\nimport { getDatasource, xAxis, yAxis, setAttributes, normalize, intersections, setLegendAttributes,defaultColor, getUniqValues}  from './functions';\nimport * as R from 'ramda';\n\n\nclass Matrix extends React.Component {\n\tconstructor(domNodeCurrent, options) {\n\t\tsuper(domNodeCurrent, options);\n\t\tthis.options = options;\n\t\tthis.svg = select(domNodeCurrent).append('svg');\n    \tthis.svg.attr('width', '100%').attr('height', '100%');\n\t};\n\tinit=(data, dims)=>{\n\t    this.data = data;\n\t    //set chart dimensions\n\t    this.dims = new Dimensions(dims);\n\t    \n\t    //create chart \n\t    this.chart = this.svg.append('g');\n\t    this.chart.attr('transform', `translate(${this.dims.margin.left}, ${this.dims.margin.top})`);\n\n\t    //add Title to chart\n\t    this.title = new Title(this.chart, this.options.titleSettings, this.dims);\n   \n\n\t    //get xLabels and yLabels from data\n\t    const dsItems = getDatasource(this.data);\n\t   \tthis.xLabels = xAxis(dsItems.map(row => (row.map(rowItems => (rowItems.items)))));\n\t   \tthis.yLabels = yAxis(dsItems.map(row => (row.map(rowItems => (rowItems.y)))));\n\n\t   \t//set colors for different products\n\t   \tvar dsItemsWcolors = setAttributes(data);\n\n\t   \t\n\t   \t\n\n\t    //set scales from data, xLabels and yLabels\n\t    this.scales = new Scales(this.xLabels, this.yLabels, this.dims, this.valuesRadius);\n\t    //Add Axis to chart\n\t    this.axes = new Axes(this.chart, this.scales, this.dims, this.options.chartSettings);\n\n\n\t   \n\t    \n\n\t    //draw Circles/Squares of data\n\t    var circlesData = (dsItemsWcolors !== undefined)?normalize(dsItemsWcolors):normalize(dsItems);\n\t    this.circles = new Circles(this.chart, circlesData, this.scales, this.dims);\t\n\n\t    //draw Intersections of data\n\t    var intersectionData = R.pipe(\n\t    \t\tR.unnest,\n\t    \t\tR.map(row=> R.assoc('color', defaultColor(this.options.legendSettings.colorIntersection, 'intersection').intersection,row)),\n\t    \t\tR.map(row => R.assoc('title', this.options.tooltipSettings.title, row))\n\t    \t\t,R.values\n\t    \t)(intersections(circlesData));\n\t    \n\t    this.intersections = new Intersection(this.chart, getUniqValues(intersectionData), this.scales, this.dims);\n\t     //add Legend to chart\n\t    var legendData = setLegendAttributes(this.data, this.options.legendSettings.category);\n\n\t    if(this.options.legendSettings.visible)\n\t   \t\tthis.legend = new Legend(this.chart, this.options.legendSettings, this.dims, legendData);  \t\n\n\t};\n\tupdateData=(data, dims)=>{\n    \tthis.circles.updateData(data, dims);\n  \t};\n  \tupdateDims=(dims)=>{\n\t    this.dims.setDims(dims);\n\n\t    this.scales.setScales(this.xLabels, this.yLabels, this.dims);\n\t    this.axes.exit();\n\t    this.axes.updateAxes(this.scales, this.dims);\n\n\n\t   \tthis.intersections.updateScales(this.scales);\n\t    this.circles.updateScales(this.scales, this.dims);\n\t    this.legend.updateScales(this.scales, this.dims);\n\t };\n};\nexport default Matrix;"]},"metadata":{},"sourceType":"module"}