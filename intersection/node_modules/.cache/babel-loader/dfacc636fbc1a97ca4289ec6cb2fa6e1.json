{"ast":null,"code":"import React from 'react';\nimport { select } from 'd3-selection';\nimport { Dimensions, Scales, Axes, Circles, Square, XAxis, YAxis, Intersection } from './utilities';\nimport * as R from 'ramda';\n\nconst xAxis = items => {\n  const xScaleKey = 'column';\n  const getXLabels = R.pipe(R.flatten, R.sortBy(R.prop(xScaleKey)), R.map(R.prop(xScaleKey)), R.uniq);\n  const xLabels = getXLabels(items);\n  return xLabels;\n};\n\nconst yAxis = items => {\n  const getYLabels = R.pipe(R.flatten, R.uniq);\n  const yLabels = getYLabels(items);\n  return yLabels.sort();\n}; //set colors of circles\n\n\nconst circleColor = ['#F44336', '#FFEBEE', '#FFCDD2', '#EF9A9A', '#E57373', '#EF5350', '#E53935', '#D32F2F', '#C62828', '#B71C1C', '#FF8A80', '#FF5252', '#FF1744', '#D50000', '#FCE4EC', '#F8BBD0'];\nconst normalize = R.pipe(R.unnest, R.map(({\n  items,\n  rowKey,\n  color\n}) => {\n  return R.map(R.pipe(R.assoc('rowKey', rowKey), R.assoc('color', color)), items);\n}), R.unnest);\n\nconst getDatasource = dataRaw => {\n  return dataRaw.map(ds => ds.data);\n};\n\nconst setColors = R.pipe(R.map(({\n  data,\n  color\n}) => {\n  return R.map(R.assoc('color', color), data);\n}), R.unnest);\n\nconst intersections = circlesData => R.pipe(R.groupBy(({\n  rowKey,\n  column\n}) => rowKey + column), R.filter(R.compose(R.lt(1), R.length)), R.map(R.head), R.values)(circlesData);\n\nclass Matrix extends React.Component {\n  constructor(domNodeCurrent, props) {\n    super(domNodeCurrent, props);\n\n    this.init = (data, dims) => {\n      this.data = data; //set chart dimensions\n\n      this.dims = new Dimensions(dims); //create chart \n\n      this.chart = this.svg.append('g');\n      this.chart.attr('transform', \"translate(\".concat(this.dims.margin.left, \", \").concat(this.dims.margin.top, \")\")); //get xLabels and yLabels from data\n\n      const dsItems = getDatasource(this.data);\n      var xLabels = xAxis(dsItems.map(row => row.map(rowItems => rowItems.items)));\n      var yLabels = yAxis(dsItems.map(row => row.map(rowItems => rowItems.rowKey))); //set colors for different products\n\n      var dsItemsWcolors = setColors(data); //set scales from data, xLabels and yLabels\n\n      this.scales = new Scales(xLabels, yLabels, this.dims);\n      this.axes = new Axes(this.chart, this.scales, this.dims);\n      const circlesData = dsItemsWcolors !== undefined ? normalize(dsItemsWcolors) : normalize(dsItems); //draw Circles/Squares of data\n\n      this.circles = new Circles(this.chart, circlesData, this.scales); //draw Intersections of data\n\n      const intersectionData = intersections(circlesData);\n      this.intersections = new Intersection(this.chart, intersectionData, this.scales);\n    };\n\n    this.updateData = data => {\n      this.circles.updateData(data);\n    };\n\n    this.updateDims = dims => {\n      this.dims.setDims(dims);\n      this.scales.setScales(this.data, this.dims);\n      this.axes.updateAxes(this.scales, this.dims);\n      this.circles.updateScales(this.scales);\n    };\n\n    this.svg = select(domNodeCurrent).append('svg');\n    this.svg.attr('width', '100%').attr('height', '100%');\n  }\n\n}\n\n;\nexport default Matrix;","map":{"version":3,"sources":["/Users/marinas/WORK/GIT/ReactD3-projects/React-projects/size_matrix/src/matrix/Matrix.js"],"names":["React","select","Dimensions","Scales","Axes","Circles","Square","XAxis","YAxis","Intersection","R","xAxis","items","xScaleKey","getXLabels","pipe","flatten","sortBy","prop","map","uniq","xLabels","yAxis","getYLabels","yLabels","sort","circleColor","normalize","unnest","rowKey","color","assoc","getDatasource","dataRaw","ds","data","setColors","intersections","circlesData","groupBy","column","filter","compose","lt","length","head","values","Matrix","Component","constructor","domNodeCurrent","props","init","dims","chart","svg","append","attr","margin","left","top","dsItems","row","rowItems","dsItemsWcolors","scales","axes","undefined","circles","intersectionData","updateData","updateDims","setDims","setScales","updateAxes","updateScales"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { select } from 'd3-selection';\nimport { Dimensions, Scales, Axes, Circles, Square , XAxis, YAxis, Intersection} from './utilities';\nimport * as R from 'ramda';\n\nconst xAxis = (items) => {\n\tconst xScaleKey = 'column';\n\n\tconst getXLabels = R.pipe(\n\t\tR.flatten,\n\t\tR.sortBy(R.prop(xScaleKey)),\n\t\tR.map(R.prop(xScaleKey)),\n\t\tR.uniq\n\t\t)\n\n\tconst xLabels = getXLabels(items);\n\treturn xLabels;\n};\nconst yAxis = (items) => {\n\n\tconst getYLabels = R.pipe(\n\t\tR.flatten,\n\t\tR.uniq\n\t\t)\n\n\tconst yLabels = getYLabels(items)\n\treturn yLabels.sort();\n};\n//set colors of circles\nconst circleColor =  [\n\t\t\t\t'#F44336',\n\t\t\t\t'#FFEBEE',\n\t\t\t\t'#FFCDD2',\n\t\t\t\t'#EF9A9A',\n\t\t\t\t'#E57373',\n\t\t\t\t'#EF5350',\n\t\t\t\t'#E53935',\n\t\t\t\t'#D32F2F',\n\t\t\t\t'#C62828',\n\t\t\t\t'#B71C1C',\n\t\t\t\t'#FF8A80',\n\t\t\t\t'#FF5252',\n\t\t\t\t'#FF1744',\n\t\t\t\t'#D50000',\n\t\t\t\t'#FCE4EC',\n\t\t\t\t'#F8BBD0',]\n\nconst normalize = R.pipe(\n  R.unnest,\n  R.map(({items, rowKey, color}) => {\n    return R.map(R.pipe(\n    \tR.assoc('rowKey', rowKey),\n    \tR.assoc('color', color)\n    ), items)\n  }),\n  R.unnest\n);\n\nconst getDatasource = (dataRaw) => {\n\t\treturn dataRaw.map(ds => (ds.data))\n};\nconst setColors = R.pipe(\n\tR.map(({data, color}) => {\n\t\treturn R.map(R.assoc('color', color), data)\n\t\t}\n\t),\n\tR.unnest\n);\n\nconst intersections =(circlesData)=> R.pipe(\n\t    \tR.groupBy(({rowKey, column}) => (rowKey + column)),\n\t    \tR.filter(R.compose(R.lt(1), R.length)),\n\t    \tR.map(R.head),\n\t    \tR.values\n\t\t)(circlesData);\n\nclass Matrix extends React.Component {\n\tconstructor(domNodeCurrent, props) {\n\t\tsuper(domNodeCurrent, props);\n\t\tthis.svg = select(domNodeCurrent).append('svg');\n    \tthis.svg.attr('width', '100%').attr('height', '100%');\n\t};\n\tinit=(data, dims)=>{\n\t    this.data = data;\n\t    \n\t    //set chart dimensions\n\t    this.dims = new Dimensions(dims);\n\t    \n\t    //create chart \n\t    this.chart = this.svg.append('g');\n\t    this.chart.attr('transform', `translate(${this.dims.margin.left}, ${this.dims.margin.top})`);\n\n\t    //get xLabels and yLabels from data\n\t    const dsItems = getDatasource(this.data);\n\t   \tvar xLabels = xAxis(dsItems.map(row => (row.map(rowItems => (rowItems.items)))));\n\t   \tvar yLabels = yAxis(dsItems.map(row => (row.map(rowItems => (rowItems.rowKey)))));\n\n\t   \t//set colors for different products\n\t   \tvar dsItemsWcolors = setColors(data);\n\t   \t\n\n\t    //set scales from data, xLabels and yLabels\n\t    this.scales = new Scales(xLabels, yLabels, this.dims);\n\t    this.axes = new Axes(this.chart, this.scales, this.dims);\n\n\t    const circlesData = (dsItemsWcolors !== undefined)?normalize(dsItemsWcolors):normalize(dsItems);\n\t   \n\t    //draw Circles/Squares of data\n\t    this.circles = new Circles(this.chart, circlesData, this.scales);\t\n\n\t   \n\t    //draw Intersections of data\n\t    const intersectionData = intersections(circlesData);\n\t    this.intersections = new Intersection(this.chart, intersectionData, this.scales)  \t\n\n\t};\n\tupdateData=(data)=>{\n    \tthis.circles.updateData(data);\n  \t};\n  \tupdateDims=(dims)=>{\n\t    this.dims.setDims(dims);\n\t    this.scales.setScales(this.data, this.dims);\n\t    this.axes.updateAxes(this.scales, this.dims);\n\t    this.circles.updateScales(this.scales);\n\t };\n};\nexport default Matrix;"]},"metadata":{},"sourceType":"module"}