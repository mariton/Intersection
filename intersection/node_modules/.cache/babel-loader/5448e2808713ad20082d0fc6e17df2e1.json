{"ast":null,"code":"import 'd3-selection';\nimport 'd3-transition';\n\nclass Intersection {\n  constructor(chart, data, scales, dims) {\n    this.enter = () => {\n      this.allIntersection.enter().append('rect').attr('class', 'intersection').attr('x', (d, i) => {\n        console.log(\"x\", this.scales.xScale(d[\"column\"], d[\"rowKey\"]));\n        this.scales.xScale(d[\"column\"], d[\"rowKey\"]);\n      }).attr('y', d => this.scales.yScale(d[\"rowKey\"])).attr('fill', d => d[\"color\"]);\n      this.allIntersection.enter().append('text').attr('class', 'intersection').text('Intersection').attr('x', (d, i) => this.scales.xScale(d[\"column\"], d[\"rowKey\"])).attr('y', d => this.scales.yScale(d[\"rowKey\"]));\n      console.log(\"dims\", this.dims);\n    };\n\n    this.updateData = newData => {\n      this.data = newData;\n      this.allIntersection = this.chart.selectAll('.intersection').data(this.data);\n      this.allIntersection.transition().duration(1000).attr('x', (d, i) => this.scales.xScale(d[\"column\"], d[\"rowKey\"])).attr('y', d => this.scales.yScale(d[\"rowKey\"])).attr('fill', d => d[\"color\"]);\n      this.enter();\n    };\n\n    this.exit = () => {\n      this.allIntersection.exit().remove();\n    };\n\n    this.chart = chart;\n    this.scales = scales;\n    this.dims = dims;\n    this.updateData(data);\n  }\n\n}\n\nexport default Intersection;","map":{"version":3,"sources":["/Users/marinas/WORK/GIT/ReactD3-projects/React-projects/size_matrix/src/matrix/utilities/Intersection.js"],"names":["Intersection","constructor","chart","data","scales","dims","enter","allIntersection","append","attr","d","i","console","log","xScale","yScale","text","updateData","newData","selectAll","transition","duration","exit","remove"],"mappings":"AAAA,OAAQ,cAAR;AACA,OAAO,eAAP;;AAEA,MAAMA,YAAN,CAAmB;AAClBC,EAAAA,WAAW,CAACC,KAAD,EAAQC,IAAR,EAAcC,MAAd,EAAqBC,IAArB,EAA0B;AAAA,SAOrCC,KAPqC,GAO/B,MAAI;AACT,WAAKC,eAAL,CAAqBD,KAArB,GACEE,MADF,CACS,MADT,EAEEC,IAFF,CAEO,OAFP,EAEgB,cAFhB,EAGEA,IAHF,CAGO,GAHP,EAGY,CAACC,CAAD,EAAGC,CAAH,KAAO;AAACC,QAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAgB,KAAKT,MAAL,CAAYU,MAAZ,CAAmBJ,CAAC,CAAC,QAAD,CAApB,EAA+BA,CAAC,CAAC,QAAD,CAAhC,CAAhB;AAA8D,aAAKN,MAAL,CAAYU,MAAZ,CAAmBJ,CAAC,CAAC,QAAD,CAApB,EAA+BA,CAAC,CAAC,QAAD,CAAhC;AAA6C,OAH/H,EAIQD,IAJR,CAIa,GAJb,EAImBC,CAAD,IAAK,KAAKN,MAAL,CAAYW,MAAZ,CAAmBL,CAAC,CAAC,QAAD,CAApB,CAJvB,EAKQD,IALR,CAKa,MALb,EAKsBC,CAAD,IAAOA,CAAC,CAAC,OAAD,CAL7B;AAMM,WAAKH,eAAL,CAAqBD,KAArB,GACJE,MADI,CACG,MADH,EAEJC,IAFI,CAEC,OAFD,EAEU,cAFV,EAGCO,IAHD,CAGM,cAHN,EAICP,IAJD,CAIM,GAJN,EAIW,CAACC,CAAD,EAAGC,CAAH,KAAO,KAAKP,MAAL,CAAYU,MAAZ,CAAmBJ,CAAC,CAAC,QAAD,CAApB,EAA+BA,CAAC,CAAC,QAAD,CAAhC,CAJlB,EAKED,IALF,CAKO,GALP,EAKaC,CAAD,IAAK,KAAKN,MAAL,CAAYW,MAAZ,CAAmBL,CAAC,CAAC,QAAD,CAApB,CALjB;AAMAE,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoB,KAAKR,IAAzB;AAEN,KAtBoC;;AAAA,SAuBrCY,UAvBqC,GAuBzBC,OAAD,IAAW;AAClB,WAAKf,IAAL,GAAYe,OAAZ;AAEA,WAAKX,eAAL,GACE,KAAKL,KAAL,CAAWiB,SAAX,CAAqB,eAArB,EAAsChB,IAAtC,CAA2C,KAAKA,IAAhD,CADF;AAEA,WAAKI,eAAL,CAAqBa,UAArB,GAAkCC,QAAlC,CAA2C,IAA3C,EACDZ,IADC,CACI,GADJ,EACS,CAACC,CAAD,EAAGC,CAAH,KAAO,KAAKP,MAAL,CAAYU,MAAZ,CAAmBJ,CAAC,CAAC,QAAD,CAApB,EAA+BA,CAAC,CAAC,QAAD,CAAhC,CADhB,EAEKD,IAFL,CAEU,GAFV,EAEgBC,CAAD,IAAK,KAAKN,MAAL,CAAYW,MAAZ,CAAmBL,CAAC,CAAC,QAAD,CAApB,CAFpB,EAGKD,IAHL,CAGU,MAHV,EAGmBC,CAAD,IAAOA,CAAC,CAAC,OAAD,CAH1B;AAIA,WAAKJ,KAAL;AACH,KAjCoC;;AAAA,SAkCrCgB,IAlCqC,GAkChC,MAAI;AACR,WAAKf,eAAL,CAAqBe,IAArB,GAA4BC,MAA5B;AACA,KApCoC;;AACjC,SAAKrB,KAAL,GAAaA,KAAb;AACA,SAAKE,MAAL,GAAcA,MAAd;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKY,UAAL,CAAgBd,IAAhB;AACH;;AANiB;;AA0CnB,eAAeH,YAAf","sourcesContent":["import  'd3-selection';\nimport 'd3-transition';\n\nclass Intersection {\n\tconstructor(chart, data, scales,dims){\n\t    this.chart = chart;\n\t    this.scales = scales;\n\t    this.dims = dims;\n\t    this.updateData(data);\n\t};\n\n\tenter=()=>{\n\t\tthis.allIntersection.enter()\n\t\t\t.append('rect')\n\t\t\t.attr('class', 'intersection')\n\t\t\t.attr('x', (d,i)=>{console.log(\"x\",this.scales.xScale(d[\"column\"],d[\"rowKey\"]) );this.scales.xScale(d[\"column\"],d[\"rowKey\"]) })\n        \t.attr('y', (d)=>this.scales.yScale(d[\"rowKey\"]) )\n        \t.attr('fill', (d) => d[\"color\"])\n        this.allIntersection.enter()\n\t\t\t.append('text')\n\t\t\t.attr('class', 'intersection')\n\t      \t.text('Intersection')\n\t      \t.attr('x', (d,i)=>this.scales.xScale(d[\"column\"],d[\"rowKey\"]))\n        \t.attr('y', (d)=>this.scales.yScale(d[\"rowKey\"]))\n        console.log(\"dims\", this.dims)\n\n\t};\n\tupdateData=(newData)=>{\n\t    this.data = newData;\n\n\t    this.allIntersection =\n\t      this.chart.selectAll('.intersection').data(this.data);\n\t    this.allIntersection.transition().duration(1000)\n\t\t\t.attr('x', (d,i)=>this.scales.xScale(d[\"column\"],d[\"rowKey\"]))\n        \t.attr('y', (d)=>this.scales.yScale(d[\"rowKey\"]))\n\t        .attr('fill', (d) => d[\"color\"])\n\t    this.enter();\n\t};\n\texit=()=>{\n\t\tthis.allIntersection.exit().remove();\n\t};\n\n\n}\n\nexport default Intersection;"]},"metadata":{},"sourceType":"module"}