{"ast":null,"code":"import 'd3-selection';\nimport 'd3-transition';\n\nclass Intersection {\n  constructor(chart, data, scales) {\n    this.enter = () => {\n      this.allIntersection.enter().append('rect').attr('class', 'intersection').attr('x', (d, i) => this.scales.xScale(d[\"column\"], d[\"rowKey\"])).attr('y', d => this.scales.yScale(d[\"rowKey\"])).attr('fill', d => d[\"color\"]);\n      this.allIntersection.enter().append('text').attr('class', 'intersection').attr(\"fill\", \"#000\").attr(\"text-anchor\", \"middle\").text('Intersection').attr('x', (d, i) => this.scales.xScale(d[\"column\"], d[\"rowKey\"])).attr('y', d => this.scales.yScale(d[\"rowKey\"]));\n    };\n\n    this.updateData = newData => {\n      this.data = newData;\n      this.allIntersection = this.chart.selectAll('.intersection').data(this.data);\n      this.allIntersection.transition().duration(1000).attr('x', (d, i) => this.scales.xScale(d[\"column\"], d[\"rowKey\"])).attr('y', d => this.scales.yScale(d[\"rowKey\"])).attr('fill', d => d[\"color\"]);\n      this.enter();\n    };\n\n    this.exit = () => {\n      this.allIntersection.exit().remove();\n    };\n\n    this.chart = chart;\n    this.scales = scales;\n    this.updateData(data);\n  }\n\n}\n\nexport default Intersection;","map":{"version":3,"sources":["/Users/marinas/WORK/GIT/ReactD3-projects/React-projects/size_matrix/src/matrix/utilities/Intersection.js"],"names":["Intersection","constructor","chart","data","scales","enter","allIntersection","append","attr","d","i","xScale","yScale","text","updateData","newData","selectAll","transition","duration","exit","remove"],"mappings":"AAAA,OAAQ,cAAR;AACA,OAAO,eAAP;;AAEA,MAAMA,YAAN,CAAmB;AAClBC,EAAAA,WAAW,CAACC,KAAD,EAAQC,IAAR,EAAcC,MAAd,EAAqB;AAAA,SAMhCC,KANgC,GAM1B,MAAI;AACT,WAAKC,eAAL,CAAqBD,KAArB,GACEE,MADF,CACS,MADT,EAEEC,IAFF,CAEO,OAFP,EAEgB,cAFhB,EAGEA,IAHF,CAGO,GAHP,EAGY,CAACC,CAAD,EAAGC,CAAH,KAAO,KAAKN,MAAL,CAAYO,MAAZ,CAAmBF,CAAC,CAAC,QAAD,CAApB,EAA+BA,CAAC,CAAC,QAAD,CAAhC,CAHnB,EAIQD,IAJR,CAIa,GAJb,EAImBC,CAAD,IAAK,KAAKL,MAAL,CAAYQ,MAAZ,CAAmBH,CAAC,CAAC,QAAD,CAApB,CAJvB,EAKQD,IALR,CAKa,MALb,EAKsBC,CAAD,IAAOA,CAAC,CAAC,OAAD,CAL7B;AAMM,WAAKH,eAAL,CAAqBD,KAArB,GACJE,MADI,CACG,MADH,EAEJC,IAFI,CAEC,OAFD,EAEU,cAFV,EAGCA,IAHD,CAGM,MAHN,EAGa,MAHb,EAIAA,IAJA,CAIK,aAJL,EAIoB,QAJpB,EAKCK,IALD,CAKM,cALN,EAMCL,IAND,CAMM,GANN,EAMW,CAACC,CAAD,EAAGC,CAAH,KAAO,KAAKN,MAAL,CAAYO,MAAZ,CAAmBF,CAAC,CAAC,QAAD,CAApB,EAA+BA,CAAC,CAAC,QAAD,CAAhC,CANlB,EAOED,IAPF,CAOO,GAPP,EAOaC,CAAD,IAAK,KAAKL,MAAL,CAAYQ,MAAZ,CAAmBH,CAAC,CAAC,QAAD,CAApB,CAPjB;AASN,KAtB+B;;AAAA,SAuBhCK,UAvBgC,GAuBpBC,OAAD,IAAW;AAClB,WAAKZ,IAAL,GAAYY,OAAZ;AAEA,WAAKT,eAAL,GACE,KAAKJ,KAAL,CAAWc,SAAX,CAAqB,eAArB,EAAsCb,IAAtC,CAA2C,KAAKA,IAAhD,CADF;AAEA,WAAKG,eAAL,CAAqBW,UAArB,GAAkCC,QAAlC,CAA2C,IAA3C,EACDV,IADC,CACI,GADJ,EACS,CAACC,CAAD,EAAGC,CAAH,KAAO,KAAKN,MAAL,CAAYO,MAAZ,CAAmBF,CAAC,CAAC,QAAD,CAApB,EAA+BA,CAAC,CAAC,QAAD,CAAhC,CADhB,EAEKD,IAFL,CAEU,GAFV,EAEgBC,CAAD,IAAK,KAAKL,MAAL,CAAYQ,MAAZ,CAAmBH,CAAC,CAAC,QAAD,CAApB,CAFpB,EAGKD,IAHL,CAGU,MAHV,EAGmBC,CAAD,IAAOA,CAAC,CAAC,OAAD,CAH1B;AAIA,WAAKJ,KAAL;AACH,KAjC+B;;AAAA,SAkChCc,IAlCgC,GAkC3B,MAAI;AACR,WAAKb,eAAL,CAAqBa,IAArB,GAA4BC,MAA5B;AACA,KApC+B;;AAC5B,SAAKlB,KAAL,GAAaA,KAAb;AACA,SAAKE,MAAL,GAAcA,MAAd;AACA,SAAKU,UAAL,CAAgBX,IAAhB;AACH;;AALiB;;AA0CnB,eAAeH,YAAf","sourcesContent":["import  'd3-selection';\nimport 'd3-transition';\n\nclass Intersection {\n\tconstructor(chart, data, scales){\n\t    this.chart = chart;\n\t    this.scales = scales;\n\t    this.updateData(data);\n\t};\n\n\tenter=()=>{\n\t\tthis.allIntersection.enter()\n\t\t\t.append('rect')\n\t\t\t.attr('class', 'intersection')\n\t\t\t.attr('x', (d,i)=>this.scales.xScale(d[\"column\"],d[\"rowKey\"]))\n        \t.attr('y', (d)=>this.scales.yScale(d[\"rowKey\"]))\n        \t.attr('fill', (d) => d[\"color\"])\n        this.allIntersection.enter()\n\t\t\t.append('text')\n\t\t\t.attr('class', 'intersection')\n\t      \t.attr(\"fill\",\"#000\")\n\t     \t.attr(\"text-anchor\", \"middle\")\n\t      \t.text('Intersection')\n\t      \t.attr('x', (d,i)=>this.scales.xScale(d[\"column\"],d[\"rowKey\"]))\n        \t.attr('y', (d)=>this.scales.yScale(d[\"rowKey\"]))\n\n\t};\n\tupdateData=(newData)=>{\n\t    this.data = newData;\n\n\t    this.allIntersection =\n\t      this.chart.selectAll('.intersection').data(this.data);\n\t    this.allIntersection.transition().duration(1000)\n\t\t\t.attr('x', (d,i)=>this.scales.xScale(d[\"column\"],d[\"rowKey\"]))\n        \t.attr('y', (d)=>this.scales.yScale(d[\"rowKey\"]))\n\t        .attr('fill', (d) => d[\"color\"])\n\t    this.enter();\n\t};\n\texit=()=>{\n\t\tthis.allIntersection.exit().remove();\n\t};\n\n\n}\n\nexport default Intersection;"]},"metadata":{},"sourceType":"module"}