{"ast":null,"code":"import React from 'react';\nimport { select } from 'd3-selection';\nimport { Dimensions, Scales, Axes, Circles, Intersection, Title } from './utilities';\nimport Legend from './Legend';\nimport * as R from 'ramda';\n\nconst xAxis = items => {\n  const xScaleKey = 'column';\n  const getXLabels = R.pipe(R.flatten, R.sortBy(R.prop(xScaleKey)), R.map(R.prop(xScaleKey)), R.uniq);\n  const xLabels = getXLabels(items);\n  return xLabels;\n};\n\nconst yAxis = items => {\n  const getYLabels = R.pipe(R.flatten, R.uniq);\n  const yLabels = getYLabels(items);\n  return yLabels.sort();\n};\n\nconst normalize = R.pipe(R.unnest, R.map(({\n  items,\n  rowKey,\n  color,\n  label\n}) => {\n  return R.map(R.pipe(R.assoc('rowKey', rowKey), R.assoc('color', color), R.assoc('label', label)), items);\n}), R.unnest);\n\nconst getDatasource = dataRaw => {\n  return dataRaw.map(ds => ds.data);\n};\n\nconst setAttributes = R.pipe(R.map(({\n  data,\n  color,\n  label\n}) => {\n  return R.map(R.pipe(R.assoc('color', color), R.assoc('label', label)), data);\n}), R.unnest);\n\nconst setLegendAttributes = (dataRaw, addIntersection) => {\n  var legendData = [];\n  dataRaw.map(row => {\n    legendData.push(R.pick(['label', 'color'], row));\n  });\n  var intersectionLegend = {\n    label: \"SIZE INTERSECTION\",\n    color: \"#fff459\"\n  };\n  legendData.push(intersectionLegend);\n  if (addIntersection !== undefined) legendData.push(intersectionLegend);\n  console.log(legendData, addIntersection);\n  return legendInt;\n};\n\nconst intersections = circlesData => R.pipe(R.groupBy(({\n  rowKey,\n  column\n}) => rowKey + column), R.filter(R.compose(R.lt(1), R.length)), R.map(R.head), R.values)(circlesData);\n\nclass Matrix extends React.Component {\n  constructor(domNodeCurrent, options) {\n    super(domNodeCurrent, options);\n\n    this.init = (data, dims) => {\n      this.data = data;\n      console.log(\"options matrix\", this.options); //set chart dimensions\n\n      this.dims = new Dimensions(dims); //create chart \n\n      this.chart = this.svg.append('g');\n      this.chart.attr('transform', \"translate(\".concat(this.dims.margin.left, \", \").concat(this.dims.margin.top, \")\")); //add Title to chart\n\n      this.title = new Title(this.chart, this.options.titleSettings, this.dims); //get xLabels and yLabels from data\n\n      const dsItems = getDatasource(this.data);\n      var xLabels = xAxis(dsItems.map(row => row.map(rowItems => rowItems.items)));\n      var yLabels = yAxis(dsItems.map(row => row.map(rowItems => rowItems.rowKey))); //set colors for different products\n\n      var dsItemsWcolors = setAttributes(data); //set scales from data, xLabels and yLabels\n\n      this.scales = new Scales(xLabels, yLabels, this.dims); //Add Axis to chart\n\n      this.axes = new Axes(this.chart, this.scales, this.dims); //draw Circles/Squares of data\n\n      var circlesData = dsItemsWcolors !== undefined ? normalize(dsItemsWcolors) : normalize(dsItems);\n      this.circles = new Circles(this.chart, circlesData, this.scales); //draw Intersections of data\n\n      var intersectionData = R.pipe(R.map(row => R.assoc('color', '#fff459', row)), R.values)(intersections(circlesData));\n      this.intersections = new Intersection(this.chart, intersectionData, this.scales, this.dims);\n      var addIntersection = true; //add Legend to chart\n\n      var legendData = setLegendAttributes(this.data, addIntersection);\n      this.legend = new Legend(this.chart, this.options.legendSettings, this.dims, legendData);\n    };\n\n    this.updateData = data => {\n      this.circles.updateData(data);\n    };\n\n    this.updateDims = dims => {\n      this.dims.setDims(dims);\n      this.scales.setScales(this.data, this.dims);\n      this.axes.updateAxes(this.scales, this.dims);\n      this.circles.updateScales(this.scales);\n    };\n\n    this.options = options;\n    this.svg = select(domNodeCurrent).append('svg');\n    this.svg.attr('width', '100%').attr('height', '100%');\n  }\n\n}\n\n;\nexport default Matrix;","map":{"version":3,"sources":["/Users/marinas/WORK/GIT/ReactD3-projects/React-projects/size_matrix/src/matrix/Matrix.js"],"names":["React","select","Dimensions","Scales","Axes","Circles","Intersection","Title","Legend","R","xAxis","items","xScaleKey","getXLabels","pipe","flatten","sortBy","prop","map","uniq","xLabels","yAxis","getYLabels","yLabels","sort","normalize","unnest","rowKey","color","label","assoc","getDatasource","dataRaw","ds","data","setAttributes","setLegendAttributes","addIntersection","legendData","row","push","pick","intersectionLegend","undefined","console","log","legendInt","intersections","circlesData","groupBy","column","filter","compose","lt","length","head","values","Matrix","Component","constructor","domNodeCurrent","options","init","dims","chart","svg","append","attr","margin","left","top","title","titleSettings","dsItems","rowItems","dsItemsWcolors","scales","axes","circles","intersectionData","legend","legendSettings","updateData","updateDims","setDims","setScales","updateAxes","updateScales"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { select } from 'd3-selection';\nimport { Dimensions, Scales, Axes, Circles,Intersection, Title} from './utilities';\nimport Legend from './Legend';\nimport * as R from 'ramda';\n\nconst xAxis = (items) => {\n\tconst xScaleKey = 'column';\n\n\tconst getXLabels = R.pipe(\n\t\tR.flatten,\n\t\tR.sortBy(R.prop(xScaleKey)),\n\t\tR.map(R.prop(xScaleKey)),\n\t\tR.uniq\n\t\t)\n\n\tconst xLabels = getXLabels(items);\n\treturn xLabels;\n};\nconst yAxis = (items) => {\n\n\tconst getYLabels = R.pipe(\n\t\tR.flatten,\n\t\tR.uniq\n\t\t)\n\n\tconst yLabels = getYLabels(items)\n\treturn yLabels.sort();\n};\n\nconst normalize = R.pipe(\n  R.unnest,\n  R.map(({items, rowKey, color, label}) => {\n    return R.map(R.pipe(\n    \tR.assoc('rowKey', rowKey),\n    \tR.assoc('color', color),\n    \tR.assoc('label', label)\n    ), items)\n  }),\n  R.unnest\n);\n\nconst getDatasource = (dataRaw) => {\n\t\treturn dataRaw.map(ds => (ds.data))\n};\nconst setAttributes = R.pipe(\n\tR.map(({data, color, label}) => {\n\t\treturn R.map(R.pipe(\n\t\t\t\tR.assoc('color', color),\n\t\t\t\tR.assoc('label', label)), data)\n\t\t}\n\t),\n\tR.unnest\n);\n\nconst setLegendAttributes = (dataRaw, addIntersection) => {\n\t\tvar legendData = [];\n\t\tdataRaw.map(row => {legendData.push(R.pick(['label', 'color'], row));});\n\t\tvar intersectionLegend = {label:\"SIZE INTERSECTION\", color:\"#fff459\"};\n\t\tlegendData.push(intersectionLegend);\n\t\tif (addIntersection !== undefined)\n\t\t\tlegendData.push(intersectionLegend);\n\t\tconsole.log(legendData, addIntersection)\n\t\treturn legendInt;\n};\n\nconst intersections =(circlesData)=> R.pipe(\n\t    \tR.groupBy(({rowKey, column}) => (rowKey + column)),\n\t    \tR.filter(R.compose(R.lt(1), R.length)),\n\t    \tR.map(R.head),\n\t    \tR.values\n\t\t)(circlesData);\n\nclass Matrix extends React.Component {\n\tconstructor(domNodeCurrent, options) {\n\t\tsuper(domNodeCurrent, options);\n\t\tthis.options = options;\n\t\tthis.svg = select(domNodeCurrent).append('svg');\n    \tthis.svg.attr('width', '100%').attr('height', '100%');\n\t};\n\tinit=(data, dims)=>{\n\t    this.data = data;\n\t    console.log(\"options matrix\",this.options)\n\t    //set chart dimensions\n\t    this.dims = new Dimensions(dims);\n\t    \n\t    //create chart \n\t    this.chart = this.svg.append('g');\n\t    this.chart.attr('transform', `translate(${this.dims.margin.left}, ${this.dims.margin.top})`);\n\n\t    //add Title to chart\n\t    this.title = new Title(this.chart, this.options.titleSettings, this.dims);\n\n\t   \n\n\t    //get xLabels and yLabels from data\n\t    const dsItems = getDatasource(this.data);\n\t   \tvar xLabels = xAxis(dsItems.map(row => (row.map(rowItems => (rowItems.items)))));\n\t   \tvar yLabels = yAxis(dsItems.map(row => (row.map(rowItems => (rowItems.rowKey)))));\n\n\t   \t//set colors for different products\n\t   \tvar dsItemsWcolors = setAttributes(data);\n\t   \t\n\n\t    //set scales from data, xLabels and yLabels\n\t    this.scales = new Scales(xLabels, yLabels, this.dims);\n\t    //Add Axis to chart\n\t    this.axes = new Axes(this.chart, this.scales, this.dims);\n\t    \n\t   \n\t    //draw Circles/Squares of data\n\t    var circlesData = (dsItemsWcolors !== undefined)?normalize(dsItemsWcolors):normalize(dsItems);\n\t    this.circles = new Circles(this.chart, circlesData, this.scales);\t\n\n\t   \n\t    //draw Intersections of data\n\t    var intersectionData = R.pipe(\n\t    \t\tR.map(row=> R.assoc('color', '#fff459',row))\n\t    \t\t, R.values\n\t    \t)(intersections(circlesData));\n\n\t    this.intersections = new Intersection(this.chart, intersectionData, this.scales, this.dims);\n\n\t    var addIntersection = true;\n\n\t     //add Legend to chart\n\t    var legendData = setLegendAttributes(this.data, addIntersection);\n\n\t    this.legend = new Legend(this.chart, this.options.legendSettings, this.dims, legendData);  \t\n\n\t};\n\tupdateData=(data)=>{\n    \tthis.circles.updateData(data);\n  \t};\n  \tupdateDims=(dims)=>{\n\t    this.dims.setDims(dims);\n\t    this.scales.setScales(this.data, this.dims);\n\t    this.axes.updateAxes(this.scales, this.dims);\n\t    this.circles.updateScales(this.scales);\n\t };\n};\nexport default Matrix;"]},"metadata":{},"sourceType":"module"}