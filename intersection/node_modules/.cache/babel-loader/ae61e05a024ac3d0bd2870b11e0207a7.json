{"ast":null,"code":"import React from 'react';\nimport { select } from 'd3-selection';\nimport { Dimensions, Scales, Axes, Circles, Intersection, Title } from './utilities';\nimport Legend from './Legend';\nimport * as R from 'ramda';\nimport * as utils from './functions';\n\nclass Matrix extends React.Component {\n  constructor(domNodeCurrent, options) {\n    super(domNodeCurrent, options);\n\n    this.init = (data, dims) => {\n      this.data = data; //set chart dimensions\n\n      this.dims = new Dimensions(dims); //create chart \n\n      this.chart = this.svg.append('g');\n      this.chart.attr('transform', \"translate(\".concat(this.dims.margin.left, \", \").concat(this.dims.margin.top, \")\")); //add Title to chart\n\n      this.title = new Title(this.chart, this.options.titleSettings, this.dims); //Input data validation and default values\n      //get xLabels and yLabels from data\n\n      const dsItems = utils.getDatasource(this.data);\n      var xLabels = xAxis(dsItems.map(row => row.map(rowItems => rowItems.items)));\n      var yLabels = yAxis(dsItems.map(row => row.map(rowItems => rowItems.rowKey))); //set colors for different products\n\n      var dsItemsWcolors = utils.setAttributes(data); //set scales from data, xLabels and yLabels\n\n      this.scales = new Scales(xLabels, yLabels, this.dims); //Add Axis to chart\n\n      this.axes = new Axes(this.chart, this.scales, this.dims); //draw Circles/Squares of data\n\n      var circlesData = dsItemsWcolors !== undefined ? utils.normalize(dsItemsWcolors) : utils.normalize(dsItems);\n      this.circles = new Circles(this.chart, circlesData, this.scales); //draw Intersections of data\n\n      var intersectionData = R.pipe(R.map(row => R.assoc('color', '#fff459', row)), R.values)(utils.intersections(circlesData));\n      this.intersections = new Intersection(this.chart, intersectionData, this.scales, this.dims); //add Legend to chart\n\n      var legendData = utils.setLegendAttributes(this.data, this.options.legendSettings.category);\n      if (this.options.legendSettings.visible) this.legend = new Legend(this.chart, this.options.legendSettings, this.dims, legendData);\n    };\n\n    this.updateData = data => {\n      this.circles.updateData(data);\n    };\n\n    this.updateDims = dims => {\n      this.dims.setDims(dims);\n      this.scales.setScales(this.data, this.dims);\n      this.axes.updateAxes(this.scales, this.dims);\n      this.circles.updateScales(this.scales);\n    };\n\n    this.options = options;\n    this.svg = select(domNodeCurrent).append('svg');\n    this.svg.attr('width', '100%').attr('height', '100%');\n  }\n\n}\n\n;\nexport default Matrix;","map":{"version":3,"sources":["/Users/marinas/WORK/GIT/ReactD3-projects/React-projects/size_matrix/src/matrix/Matrix.js"],"names":["React","select","Dimensions","Scales","Axes","Circles","Intersection","Title","Legend","R","utils","Matrix","Component","constructor","domNodeCurrent","options","init","data","dims","chart","svg","append","attr","margin","left","top","title","titleSettings","dsItems","getDatasource","xLabels","xAxis","map","row","rowItems","items","yLabels","yAxis","rowKey","dsItemsWcolors","setAttributes","scales","axes","circlesData","undefined","normalize","circles","intersectionData","pipe","assoc","values","intersections","legendData","setLegendAttributes","legendSettings","category","visible","legend","updateData","updateDims","setDims","setScales","updateAxes","updateScales"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,IAA7B,EAAmCC,OAAnC,EAA2CC,YAA3C,EAAyDC,KAAzD,QAAqE,aAArE;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAO,KAAKC,CAAZ,MAAmB,OAAnB;AACA,OAAO,KAAKC,KAAZ,MAAuB,aAAvB;;AAGA,MAAMC,MAAN,SAAqBX,KAAK,CAACY,SAA3B,CAAqC;AACpCC,EAAAA,WAAW,CAACC,cAAD,EAAiBC,OAAjB,EAA0B;AACpC,UAAMD,cAAN,EAAsBC,OAAtB;;AADoC,SAMrCC,IANqC,GAMhC,CAACC,IAAD,EAAOC,IAAP,KAAc;AACf,WAAKD,IAAL,GAAYA,IAAZ,CADe,CAEf;;AACA,WAAKC,IAAL,GAAY,IAAIhB,UAAJ,CAAegB,IAAf,CAAZ,CAHe,CAKf;;AACA,WAAKC,KAAL,GAAa,KAAKC,GAAL,CAASC,MAAT,CAAgB,GAAhB,CAAb;AACA,WAAKF,KAAL,CAAWG,IAAX,CAAgB,WAAhB,sBAA0C,KAAKJ,IAAL,CAAUK,MAAV,CAAiBC,IAA3D,eAAoE,KAAKN,IAAL,CAAUK,MAAV,CAAiBE,GAArF,QAPe,CASf;;AACA,WAAKC,KAAL,GAAa,IAAInB,KAAJ,CAAU,KAAKY,KAAf,EAAsB,KAAKJ,OAAL,CAAaY,aAAnC,EAAkD,KAAKT,IAAvD,CAAb,CAVe,CAYf;AAIA;;AACA,YAAMU,OAAO,GAAGlB,KAAK,CAACmB,aAAN,CAAoB,KAAKZ,IAAzB,CAAhB;AACA,UAAIa,OAAO,GAAGC,KAAK,CAACH,OAAO,CAACI,GAAR,CAAYC,GAAG,IAAKA,GAAG,CAACD,GAAJ,CAAQE,QAAQ,IAAKA,QAAQ,CAACC,KAA9B,CAApB,CAAD,CAAnB;AACA,UAAIC,OAAO,GAAGC,KAAK,CAACT,OAAO,CAACI,GAAR,CAAYC,GAAG,IAAKA,GAAG,CAACD,GAAJ,CAAQE,QAAQ,IAAKA,QAAQ,CAACI,MAA9B,CAApB,CAAD,CAAnB,CAnBe,CAqBf;;AACA,UAAIC,cAAc,GAAG7B,KAAK,CAAC8B,aAAN,CAAoBvB,IAApB,CAArB,CAtBe,CAyBf;;AACA,WAAKwB,MAAL,GAAc,IAAItC,MAAJ,CAAW2B,OAAX,EAAoBM,OAApB,EAA6B,KAAKlB,IAAlC,CAAd,CA1Be,CA2Bf;;AACA,WAAKwB,IAAL,GAAY,IAAItC,IAAJ,CAAS,KAAKe,KAAd,EAAqB,KAAKsB,MAA1B,EAAkC,KAAKvB,IAAvC,CAAZ,CA5Be,CA+Bf;;AACA,UAAIyB,WAAW,GAAIJ,cAAc,KAAKK,SAApB,GAA+BlC,KAAK,CAACmC,SAAN,CAAgBN,cAAhB,CAA/B,GAA+D7B,KAAK,CAACmC,SAAN,CAAgBjB,OAAhB,CAAjF;AACA,WAAKkB,OAAL,GAAe,IAAIzC,OAAJ,CAAY,KAAKc,KAAjB,EAAwBwB,WAAxB,EAAqC,KAAKF,MAA1C,CAAf,CAjCe,CAoCf;;AACA,UAAIM,gBAAgB,GAAGtC,CAAC,CAACuC,IAAF,CACrBvC,CAAC,CAACuB,GAAF,CAAMC,GAAG,IAAGxB,CAAC,CAACwC,KAAF,CAAQ,OAAR,EAAiB,SAAjB,EAA2BhB,GAA3B,CAAZ,CADqB,EAEnBxB,CAAC,CAACyC,MAFiB,EAGpBxC,KAAK,CAACyC,aAAN,CAAoBR,WAApB,CAHoB,CAAvB;AAKA,WAAKQ,aAAL,GAAqB,IAAI7C,YAAJ,CAAiB,KAAKa,KAAtB,EAA6B4B,gBAA7B,EAA+C,KAAKN,MAApD,EAA4D,KAAKvB,IAAjE,CAArB,CA1Ce,CA2Cd;;AACD,UAAIkC,UAAU,GAAG1C,KAAK,CAAC2C,mBAAN,CAA0B,KAAKpC,IAA/B,EAAqC,KAAKF,OAAL,CAAauC,cAAb,CAA4BC,QAAjE,CAAjB;AAEA,UAAG,KAAKxC,OAAL,CAAauC,cAAb,CAA4BE,OAA/B,EACC,KAAKC,MAAL,GAAc,IAAIjD,MAAJ,CAAW,KAAKW,KAAhB,EAAuB,KAAKJ,OAAL,CAAauC,cAApC,EAAoD,KAAKpC,IAAzD,EAA+DkC,UAA/D,CAAd;AAEJ,KAvDoC;;AAAA,SAwDrCM,UAxDqC,GAwDzBzC,IAAD,IAAQ;AACf,WAAK6B,OAAL,CAAaY,UAAb,CAAwBzC,IAAxB;AACD,KA1DkC;;AAAA,SA2DnC0C,UA3DmC,GA2DvBzC,IAAD,IAAQ;AACjB,WAAKA,IAAL,CAAU0C,OAAV,CAAkB1C,IAAlB;AACA,WAAKuB,MAAL,CAAYoB,SAAZ,CAAsB,KAAK5C,IAA3B,EAAiC,KAAKC,IAAtC;AACA,WAAKwB,IAAL,CAAUoB,UAAV,CAAqB,KAAKrB,MAA1B,EAAkC,KAAKvB,IAAvC;AACA,WAAK4B,OAAL,CAAaiB,YAAb,CAA0B,KAAKtB,MAA/B;AACF,KAhEmC;;AAEpC,SAAK1B,OAAL,GAAeA,OAAf;AACA,SAAKK,GAAL,GAAWnB,MAAM,CAACa,cAAD,CAAN,CAAuBO,MAAvB,CAA8B,KAA9B,CAAX;AACG,SAAKD,GAAL,CAASE,IAAT,CAAc,OAAd,EAAuB,MAAvB,EAA+BA,IAA/B,CAAoC,QAApC,EAA8C,MAA9C;AACH;;AANmC;;AAkEpC;AACD,eAAeX,MAAf","sourcesContent":["import React from 'react';\nimport { select } from 'd3-selection';\nimport { Dimensions, Scales, Axes, Circles,Intersection, Title} from './utilities';\nimport Legend from './Legend';\nimport * as R from 'ramda';\nimport * as utils from './functions';\n\n\nclass Matrix extends React.Component {\n\tconstructor(domNodeCurrent, options) {\n\t\tsuper(domNodeCurrent, options);\n\t\tthis.options = options;\n\t\tthis.svg = select(domNodeCurrent).append('svg');\n    \tthis.svg.attr('width', '100%').attr('height', '100%');\n\t};\n\tinit=(data, dims)=>{\n\t    this.data = data;\n\t    //set chart dimensions\n\t    this.dims = new Dimensions(dims);\n\t    \n\t    //create chart \n\t    this.chart = this.svg.append('g');\n\t    this.chart.attr('transform', `translate(${this.dims.margin.left}, ${this.dims.margin.top})`);\n\n\t    //add Title to chart\n\t    this.title = new Title(this.chart, this.options.titleSettings, this.dims);\n\n\t    //Input data validation and default values\n\n\t   \n\n\t    //get xLabels and yLabels from data\n\t    const dsItems = utils.getDatasource(this.data);\n\t   \tvar xLabels = xAxis(dsItems.map(row => (row.map(rowItems => (rowItems.items)))));\n\t   \tvar yLabels = yAxis(dsItems.map(row => (row.map(rowItems => (rowItems.rowKey)))));\n\n\t   \t//set colors for different products\n\t   \tvar dsItemsWcolors = utils.setAttributes(data);\n\t   \t\n\n\t    //set scales from data, xLabels and yLabels\n\t    this.scales = new Scales(xLabels, yLabels, this.dims);\n\t    //Add Axis to chart\n\t    this.axes = new Axes(this.chart, this.scales, this.dims);\n\t    \n\t   \n\t    //draw Circles/Squares of data\n\t    var circlesData = (dsItemsWcolors !== undefined)?utils.normalize(dsItemsWcolors):utils.normalize(dsItems);\n\t    this.circles = new Circles(this.chart, circlesData, this.scales);\t\n\n\t   \n\t    //draw Intersections of data\n\t    var intersectionData = R.pipe(\n\t    \t\tR.map(row=> R.assoc('color', '#fff459',row))\n\t    \t\t, R.values\n\t    \t)(utils.intersections(circlesData));\n\n\t    this.intersections = new Intersection(this.chart, intersectionData, this.scales, this.dims);\n\t     //add Legend to chart\n\t    var legendData = utils.setLegendAttributes(this.data, this.options.legendSettings.category);\n\n\t    if(this.options.legendSettings.visible)\n\t   \t\tthis.legend = new Legend(this.chart, this.options.legendSettings, this.dims, legendData);  \t\n\n\t};\n\tupdateData=(data)=>{\n    \tthis.circles.updateData(data);\n  \t};\n  \tupdateDims=(dims)=>{\n\t    this.dims.setDims(dims);\n\t    this.scales.setScales(this.data, this.dims);\n\t    this.axes.updateAxes(this.scales, this.dims);\n\t    this.circles.updateScales(this.scales);\n\t };\n};\nexport default Matrix;"]},"metadata":{},"sourceType":"module"}