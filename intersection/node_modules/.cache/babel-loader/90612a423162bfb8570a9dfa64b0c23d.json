{"ast":null,"code":"import 'd3-selection';\nimport 'd3-transition';\nimport * as d3 from 'd3';\nimport d3Tip from 'd3-tip';\nconst tip = d3Tip().attr('class', 'd3-tip').offset([-10, 0]).html(function (d) {\n  return \"<strong>Data:</strong> <span style='color:red'>\" + d[\"column\"] + d[\"rowKey\"] + \"</span>\";\n});\n\nclass Circles {\n  constructor(chart, data, scales) {\n    this.updateData = newData => {\n      this.data = newData;\n      this.allCircles = this.chart.selectAll('.myCircle').data(this.data);\n      this.allCircles.transition().duration(1000).attr('cx', (d, i) => this.scales.xScale(d[\"column\"], d[\"rowKey\"])).attr('cy', d => this.scales.yScale(d[\"rowKey\"])).attr('fill', d => d[\"color\"]).on('mouseover', tip.show).on('mouseout', tip.hide);\n      this.enter();\n    };\n\n    this.enter = () => {\n      this.allCircles.enter().append('circle').attr('class', 'myCircle').attr('cx', (d, i) => this.scales.xScale(d[\"column\"], d[\"rowKey\"])).attr('cy', d => this.scales.yScale(d[\"rowKey\"])).attr('r', d => d[\"value\"] * 3).attr('fill', d => d[\"color\"]).attr(\"opacity\", 0.8).on(\"mouseover\", tip.show).on('mouseout', tip.hide);\n      this.exit();\n    };\n\n    this.exit = () => {\n      this.allCircles.exit().remove();\n    };\n\n    this.updateScales = newScales => {\n      this.scales = newScales;\n      this.allCircles = this.chart.selectAll('.myCircle').prototype.transition().duration(500).attr('cx', (d, i) => this.scales.xScale(d[\"column\"], d[\"rowKey\"])).attr('cy', d => this.scales.yScale(d[\"rowKey\"]));\n    };\n\n    this.chart = chart;\n    this.scales = scales;\n    this.chart.select('svg').call(tip);\n    this.updateData(data);\n  }\n\n}\n\n;\nexport default Circles;","map":{"version":3,"sources":["/Users/marinas/WORK/GIT/ReactD3-projects/React-projects/size_matrix/src/matrix/utilities/Circles.js"],"names":["d3","d3Tip","tip","attr","offset","html","d","Circles","constructor","chart","data","scales","updateData","newData","allCircles","selectAll","transition","duration","i","xScale","yScale","on","show","hide","enter","append","exit","remove","updateScales","newScales","prototype","select","call"],"mappings":"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","sourcesContent":["import  'd3-selection';\nimport 'd3-transition';\nimport * as d3 from 'd3'\nimport d3Tip from 'd3-tip';\n\nconst tip = d3Tip().attr('class', 'd3-tip')\n  .offset([-10, 0])\n  .html(function(d) {\n    return \"<strong>Data:</strong> <span style='color:red'>\" + d[\"column\"]+ d[\"rowKey\"] + \"</span>\";\n  })\n\n\nclass Circles {\n  constructor(chart, data, scales){\n    this.chart = chart;\n    this.scales = scales;\n    this.chart.select('svg').call(tip);\n    this.updateData(data);\n  };\n\n  updateData=(newData)=>{\n    this.data = newData;\n\n    this.allCircles =\n      this.chart.selectAll('.myCircle').data(this.data);\n    this.allCircles.transition().duration(1000)\n        .attr('cx', (d,i)=>this.scales.xScale(d[\"column\"],d[\"rowKey\"]))\n        .attr('cy', (d)=>this.scales.yScale(d[\"rowKey\"]))\n        .attr('fill', (d) => d[\"color\"])\n        .on('mouseover', tip.show)\n        .on('mouseout', tip.hide)\n    this.enter();\n  };\n  enter=()=>{\n\n    this.allCircles.enter()\n        .append('circle')\n        .attr('class', 'myCircle')\n        .attr('cx', (d,i)=>this.scales.xScale(d[\"column\"],d[\"rowKey\"]))\n        .attr('cy', (d)=>this.scales.yScale(d[\"rowKey\"]))\n        .attr('r', (d) => d[\"value\"] * 3)\n        .attr('fill', (d) => d[\"color\"])\n        .attr(\"opacity\", 0.8)\n        .on(\"mouseover\", tip.show)\n        .on('mouseout', tip.hide)\n\n        \n    this.exit();\n  };\n  exit=()=>{\n    this.allCircles.exit().remove();\n  };\n  updateScales=(newScales)=>{\n    this.scales = newScales;\n    this.allCircles =\n      this.chart.selectAll('.myCircle')\n        .prototype.transition().duration(500)\n          .attr('cx', (d,i)=>this.scales.xScale(d[\"column\"],d[\"rowKey\"]))\n          .attr('cy', (d)=>this.scales.yScale(d[\"rowKey\"]))\n  };\n};\nexport default Circles;"]},"metadata":{},"sourceType":"module"}