{"ast":null,"code":"import * as R from 'ramda';\nimport * as d3 from 'd3';\nimport d3Tip from 'd3-tip';\nexport const defaultColorObj = {\n  intersection: '#fff459',\n  mark: '#42d7f5'\n};\nexport const xAxis = items => {\n  const xScaleKey = 'x';\n  const getXLabels = R.pipe(R.flatten, R.sortBy(R.prop(xScaleKey)), R.map(R.prop(xScaleKey)), R.uniq);\n  const xLabels = getXLabels(items);\n  return xLabels;\n};\nexport const yAxis = items => {\n  const getYLabels = R.pipe(R.flatten, R.uniq);\n  const yLabels = getYLabels(items);\n  return yLabels.sort();\n};\nexport const normalize = R.pipe(R.unnest, R.map(({\n  items,\n  y,\n  color,\n  label\n}) => {\n  return R.map(R.pipe(R.assoc('y', y), R.assoc('color', color), R.assoc('label', label)), items);\n}), R.unnest);\nexport const getDatasource = dataRaw => {\n  return dataRaw.map(ds => ds.data);\n};\nexport const setAttributes = R.pipe(R.map(({\n  data,\n  color,\n  label\n}) => {\n  return R.map(R.pipe(R.assoc('color', color !== undefined ? color : defaultColorObj.mark), R.assoc('label', label)), data);\n}), R.unnest);\nexport const setLegendAttributes = (dataRaw, category) => {\n  var legendData = [];\n  dataRaw.map(row => {\n    legendData.push(R.pick([category, 'color'], row));\n  });\n  return legendData;\n};\nexport const intersections = circlesData => R.pipe(R.groupBy(({\n  y,\n  x\n}) => y + x), R.filter(R.compose(R.lt(1), R.length)), R.map(R.pick(['y', 'x'])), R.values)(circlesData);\nexport const defaultColor = (color, location) => {\n  var colorObj = {\n    [location]: color\n  };\n  return color !== undefined ? colorObj : defaultColorObj;\n};\nexport const tip = d3Tip().attr('class', 'd3-tip').offset([-10, 0]).html(function (d) {\n  return \"<div class='d3-tip'>\" + \"<table>\" + \"<tr><th>Size</th><th>Quantity</th></tr>\" + \"<tr><td>\" + d.y + d.x + \"</td><td>\" + d.value + \"</td></tr>\" + \"</table>\" + \"</div>\";\n});","map":{"version":3,"sources":["/Users/marinas/WORK/GIT/ReactD3-projects/React-projects/size_matrix/src/matrix/functions.js"],"names":["R","d3","d3Tip","defaultColorObj","intersection","mark","xAxis","items","xScaleKey","getXLabels","pipe","flatten","sortBy","prop","map","uniq","xLabels","yAxis","getYLabels","yLabels","sort","normalize","unnest","y","color","label","assoc","getDatasource","dataRaw","ds","data","setAttributes","undefined","setLegendAttributes","category","legendData","row","push","pick","intersections","circlesData","groupBy","x","filter","compose","lt","length","values","defaultColor","location","colorObj","tip","attr","offset","html","d","value"],"mappings":"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","sourcesContent":["import * as R from 'ramda';\nimport * as d3 from 'd3'\nimport d3Tip from 'd3-tip';\n\n\nexport const defaultColorObj = {\n\t\tintersection:'#fff459',\n\t\tmark:'#42d7f5'\n\t};\n\nexport const xAxis = (items) => {\n\tconst xScaleKey = 'x';\n\n\tconst getXLabels = R.pipe(\n\t\tR.flatten,\n\t\tR.sortBy(R.prop(xScaleKey)),\n\t\tR.map(R.prop(xScaleKey)),\n\t\tR.uniq\n\t\t)\n\n\tconst xLabels = getXLabels(items);\n\treturn xLabels;\n};\nexport const yAxis = (items) => {\n\n\tconst getYLabels = R.pipe(\n\t\tR.flatten,\n\t\tR.uniq\n\t\t)\n\n\tconst yLabels = getYLabels(items);\n\treturn yLabels.sort();\n};\n\nexport const normalize = R.pipe(\n  R.unnest,\n  R.map(({items, y, color, label}) => {\n    return R.map(R.pipe(\n    \tR.assoc('y', y),\n    \tR.assoc('color', color),\n    \tR.assoc('label', label)\n    ), items)\n  }),\n  R.unnest\n);\n\nexport const getDatasource = (dataRaw) => {\n\t\treturn dataRaw.map(ds => (ds.data))\n};\n\nexport const setAttributes = R.pipe(\n\tR.map(({data, color, label}) => {\n\t\treturn R.map(R.pipe(\n\t\t\t\tR.assoc('color', (color!==undefined)?color:defaultColorObj.mark),\n\t\t\t\tR.assoc('label', label)), data)\n\t\t}\n\t),\n\tR.unnest\n);\n\nexport const setLegendAttributes = (dataRaw, category) => {\n\t\tvar legendData = [];\n\t\tdataRaw.map(row => {legendData.push(R.pick([category, 'color'], row));});\n\t\treturn legendData;\n};\n\nexport const intersections =(circlesData)=> R.pipe(\n\t    \tR.groupBy(({y, x}) => (y + x)),\n\t    \tR.filter(R.compose(R.lt(1), R.length)),\n\t    \tR.map(R.pick(['y','x'])),\n\t    \tR.values\n\t\t)(circlesData);\nexport const defaultColor=(color, location) =>{\n\t\tvar colorObj = {[location]: color};\n\t\treturn  (color!==undefined)?colorObj:defaultColorObj;\n};\n\nexport const tip = d3Tip().attr('class', 'd3-tip')\n  .offset([-10, 0])\n  .html(function(d) {\n    return \"<div class='d3-tip'>\" +\n            \"<table>\" +\n            \"<tr><th>Size</th><th>Quantity</th></tr>\" +\n            \"<tr><td>\"+ d.y + d.x +\"</td><td>\" + d.value+ \"</td></tr>\" +\n            \"</table>\" +\n            \"</div>\" ;\n  });\n"]},"metadata":{},"sourceType":"module"}