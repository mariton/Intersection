{"ast":null,"code":"var _jsxFileName = \"/Users/marinas/WORK/GIT/ReactD3-projects/React-projects/size_matrix/src/matrix/Matrix.js\";\nimport React from 'react';\nimport { Square } from './utilities';\nimport * as R from 'ramda';\nimport { select } from 'd3-selection';\nimport { Dimensions, Scales, Axes } from './utilities';\n\nclass Matrix {\n  constructor(domNodeCurrent) {\n    this.init = (data, dims) => {\n      this.data = data;\n      this.dims = new Dimensions(dims);\n      this.chart = this.svg.append('g');\n      this.chart.attr('transform', \"translate(\".concat(this.dims.margin.left, \", \").concat(this.dims.margin.top, \")\"));\n      this.scales = new Scales(this.data, this.dims); //\n\n      this.axes = new Axes(this.chart, this.scales, this.dims);\n    };\n\n    this.svg = select(domNodeCurrent).append('svg');\n    this.svg.attr('width', '100%').attr('height', '100%');\n  }\n\n  renderSquare(item, className = \"square\") {\n    return React.createElement(Square, {\n      value: item.value,\n      className: className,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, this.props.data.map(row => React.createElement(\"div\", {\n      className: \"board-row\",\n      key: row.uniqueId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, R.map(this.renderSquare, row))));\n  }\n\n}\n\n;\nexport default Matrix;","map":{"version":3,"sources":["/Users/marinas/WORK/GIT/ReactD3-projects/React-projects/size_matrix/src/matrix/Matrix.js"],"names":["React","Square","R","select","Dimensions","Scales","Axes","Matrix","constructor","domNodeCurrent","init","data","dims","chart","svg","append","attr","margin","left","top","scales","axes","renderSquare","item","className","value","render","props","map","row","uniqueId"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,OAAO,KAAKC,CAAZ,MAAmB,OAAnB;AAEA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,IAA7B,QAAyC,aAAzC;;AAGA,MAAMC,MAAN,CAAa;AACZC,EAAAA,WAAW,CAACC,cAAD,EAAiB;AAAA,SAI5BC,IAJ4B,GAIvB,CAACC,IAAD,EAAOC,IAAP,KAAc;AACf,WAAKD,IAAL,GAAYA,IAAZ;AACA,WAAKC,IAAL,GAAY,IAAIR,UAAJ,CAAeQ,IAAf,CAAZ;AACA,WAAKC,KAAL,GAAa,KAAKC,GAAL,CAASC,MAAT,CAAgB,GAAhB,CAAb;AACA,WAAKF,KAAL,CAAWG,IAAX,CAAgB,WAAhB,sBAA0C,KAAKJ,IAAL,CAAUK,MAAV,CAAiBC,IAA3D,eAAoE,KAAKN,IAAL,CAAUK,MAAV,CAAiBE,GAArF;AACA,WAAKC,MAAL,GAAc,IAAIf,MAAJ,CAAW,KAAKM,IAAhB,EAAsB,KAAKC,IAA3B,CAAd,CALe,CAKgC;;AAC/C,WAAKS,IAAL,GAAY,IAAIf,IAAJ,CAAS,KAAKO,KAAd,EAAqB,KAAKO,MAA1B,EAAkC,KAAKR,IAAvC,CAAZ;AAED,KAZyB;;AAC3B,SAAKE,GAAL,GAAWX,MAAM,CAACM,cAAD,CAAN,CAAuBM,MAAvB,CAA8B,KAA9B,CAAX;AACA,SAAKD,GAAL,CAASE,IAAT,CAAc,OAAd,EAAuB,MAAvB,EAA+BA,IAA/B,CAAoC,QAApC,EAA8C,MAA9C;AACA;;AAUDM,EAAAA,YAAY,CAACC,IAAD,EAAOC,SAAS,GAAC,QAAjB,EAA2B;AACtC,WAAO,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAED,IAAI,CAACE,KAApB;AAA2B,MAAA,SAAS,EAAID,SAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACA;;AAEDE,EAAAA,MAAM,GAAG;AACR,WACC;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEC,KAAKC,KAAL,CAAWhB,IAAX,CAAgBiB,GAAhB,CAAoBC,GAAG,IACtB;AAAK,MAAA,SAAS,EAAC,WAAf;AAA2B,MAAA,GAAG,EAAEA,GAAG,CAACC,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgD5B,CAAC,CAAC0B,GAAF,CAAM,KAAKN,YAAX,EAAyBO,GAAzB,CAAhD,CADD,CAFD,CADD;AAWA;;AA9BW;;AA+BZ;AACD,eAAetB,MAAf","sourcesContent":["import React from 'react';\nimport { Square } from './utilities';\nimport * as R from 'ramda';\n\nimport { select } from 'd3-selection';\nimport { Dimensions, Scales, Axes } from './utilities';\n\n\nclass Matrix {\n\tconstructor(domNodeCurrent) {\n\t\tthis.svg = select(domNodeCurrent).append('svg');\n\t\tthis.svg.attr('width', '100%').attr('height', '100%');\n\t};\n\tinit=(data, dims)=>{\n\t    this.data = data;\n\t    this.dims = new Dimensions(dims); \n\t    this.chart = this.svg.append('g');\n\t    this.chart.attr('transform', `translate(${this.dims.margin.left}, ${this.dims.margin.top})`);\n\t    this.scales = new Scales(this.data, this.dims);//\n\t    this.axes = new Axes(this.chart, this.scales, this.dims);\n\t    \n\t  };\n\trenderSquare(item, className=\"square\") {\n\t\treturn <Square value={item.value} className = {className}/>;\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t{\n\t\t\t\tthis.props.data.map(row => (\n\t\t\t\t\t<div className=\"board-row\" key={row.uniqueId}>{ R.map(this.renderSquare, row) }</div>\n\t\t\t\t))\n\t\t\t}\n\t\t\t</div>\n\t\t)\n\n\t\t\n\t};\n};\nexport default Matrix;"]},"metadata":{},"sourceType":"module"}