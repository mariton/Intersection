{"ast":null,"code":"import { selectAll } from 'd3-selection';\nimport 'd3-transition';\n\nclass Circles {\n  constructor(chart, data, scales) {\n    this.updateData = newData => {\n      this.data = newData;\n      console.log(\"circles-data\", this.data);\n      this.allCircles = this.chart.selectAll('.myCircle').data(this.data);\n      this.allCircles.transition().duration(1000).attr('cx', (d, i) => {\n        this.scales.xScale(i);\n      }).attr('cy', d => this.scales.yScale(d)).attr('fill', 'orange');\n      this.enter();\n    };\n\n    this.enter = () => {\n      console.log(this.scales);\n      this.allCircles.enter().append('circle').attr('class', 'myCircle').attr('cx', (d, i) => {\n        console.log(\"i\", d[\"c\"]);\n        this.scales.xScale(d.c);\n      }).attr('cy', d => this.scales.yScale(d.r)).attr('r', 10).attr('fill', 'green');\n      this.exit();\n    };\n\n    this.exit = () => {\n      this.allCircles.exit().remove();\n    };\n\n    this.updateScales = newScales => {\n      this.scales = newScales;\n      this.allCircles = this.chart.selectAll('.myCircle').prototype.transition().duration(500).attr('cx', (d, i) => this.scales.xScale(i)).attr('cy', d => this.scales.yScale(d));\n    };\n\n    this.chart = chart;\n    this.scales = scales;\n    this.updateData(data);\n  }\n\n}\n\n;\nexport default Circles;","map":{"version":3,"sources":["/Users/marinas/WORK/GIT/ReactD3-projects/React-projects/size_matrix/src/matrix/utilities/Circles.js"],"names":["selectAll","Circles","constructor","chart","data","scales","updateData","newData","console","log","allCircles","transition","duration","attr","d","i","xScale","yScale","enter","append","c","r","exit","remove","updateScales","newScales","prototype"],"mappings":"AAAA,SAASA,SAAT,QAA0B,cAA1B;AACA,OAAO,eAAP;;AAEA,MAAMC,OAAN,CAAc;AACZC,EAAAA,WAAW,CAACC,KAAD,EAAQC,IAAR,EAAcC,MAAd,EAAqB;AAAA,SAMhCC,UANgC,GAMpBC,OAAD,IAAW;AACpB,WAAKH,IAAL,GAAYG,OAAZ;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2B,KAAKL,IAAhC;AAEA,WAAKM,UAAL,GACE,KAAKP,KAAL,CAAWH,SAAX,CAAqB,WAArB,EAAkCI,IAAlC,CAAuC,KAAKA,IAA5C,CADF;AAEA,WAAKM,UAAL,CAAgBC,UAAhB,GAA6BC,QAA7B,CAAsC,IAAtC,EACKC,IADL,CACU,IADV,EACgB,CAACC,CAAD,EAAGC,CAAH,KAAO;AAAC,aAAKV,MAAL,CAAYW,MAAZ,CAAmBD,CAAnB;AAAsB,OAD9C,EAEKF,IAFL,CAEU,IAFV,EAEiBC,CAAD,IAAK,KAAKT,MAAL,CAAYY,MAAZ,CAAmBH,CAAnB,CAFrB,EAGKD,IAHL,CAGU,MAHV,EAGkB,QAHlB;AAIA,WAAKK,KAAL;AACD,KAjB+B;;AAAA,SAkBhCA,KAlBgC,GAkB1B,MAAI;AACRV,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,MAAjB;AACA,WAAKK,UAAL,CAAgBQ,KAAhB,GACGC,MADH,CACU,QADV,EAEKN,IAFL,CAEU,OAFV,EAEmB,UAFnB,EAGKA,IAHL,CAGU,IAHV,EAGgB,CAACC,CAAD,EAAGC,CAAH,KAAO;AAACP,QAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAgBK,CAAC,CAAC,GAAD,CAAjB;AAAwB,aAAKT,MAAL,CAAYW,MAAZ,CAAmBF,CAAC,CAACM,CAArB;AAAyB,OAHzE,EAIKP,IAJL,CAIU,IAJV,EAIiBC,CAAD,IAAK,KAAKT,MAAL,CAAYY,MAAZ,CAAmBH,CAAC,CAACO,CAArB,CAJrB,EAKKR,IALL,CAKU,GALV,EAKe,EALf,EAMKA,IANL,CAMU,MANV,EAMkB,OANlB;AAOA,WAAKS,IAAL;AACD,KA5B+B;;AAAA,SA6BhCA,IA7BgC,GA6B3B,MAAI;AACP,WAAKZ,UAAL,CAAgBY,IAAhB,GAAuBC,MAAvB;AACD,KA/B+B;;AAAA,SAgChCC,YAhCgC,GAgClBC,SAAD,IAAa;AACxB,WAAKpB,MAAL,GAAcoB,SAAd;AACA,WAAKf,UAAL,GACE,KAAKP,KAAL,CAAWH,SAAX,CAAqB,WAArB,EACG0B,SADH,CACaf,UADb,GAC0BC,QAD1B,CACmC,GADnC,EAEKC,IAFL,CAEU,IAFV,EAEgB,CAACC,CAAD,EAAGC,CAAH,KAAO,KAAKV,MAAL,CAAYW,MAAZ,CAAmBD,CAAnB,CAFvB,EAGKF,IAHL,CAGU,IAHV,EAGiBC,CAAD,IAAK,KAAKT,MAAL,CAAYY,MAAZ,CAAmBH,CAAnB,CAHrB,CADF;AAKD,KAvC+B;;AAC9B,SAAKX,KAAL,GAAaA,KAAb;AACA,SAAKE,MAAL,GAAcA,MAAd;AACA,SAAKC,UAAL,CAAgBF,IAAhB;AACD;;AALW;;AAyCb;AACD,eAAeH,OAAf","sourcesContent":["import { selectAll } from 'd3-selection';\nimport 'd3-transition';\n\nclass Circles {\n  constructor(chart, data, scales){\n    this.chart = chart;\n    this.scales = scales;\n    this.updateData(data);\n  };\n\n  updateData=(newData)=>{\n    this.data = newData;\n    console.log(\"circles-data\",this.data);\n\n    this.allCircles =\n      this.chart.selectAll('.myCircle').data(this.data);\n    this.allCircles.transition().duration(1000)\n        .attr('cx', (d,i)=>{this.scales.xScale(i)})\n        .attr('cy', (d)=>this.scales.yScale(d))\n        .attr('fill', 'orange')\n    this.enter();\n  };\n  enter=()=>{\n    console.log(this.scales)\n    this.allCircles.enter()\n      .append('circle')\n        .attr('class', 'myCircle')\n        .attr('cx', (d,i)=>{console.log(\"i\",d[\"c\"]);this.scales.xScale(d.c);})\n        .attr('cy', (d)=>this.scales.yScale(d.r))\n        .attr('r', 10)\n        .attr('fill', 'green')\n    this.exit();\n  };\n  exit=()=>{\n    this.allCircles.exit().remove();\n  };\n  updateScales=(newScales)=>{\n    this.scales = newScales;\n    this.allCircles =\n      this.chart.selectAll('.myCircle')\n        .prototype.transition().duration(500)\n          .attr('cx', (d,i)=>this.scales.xScale(i))\n          .attr('cy', (d)=>this.scales.yScale(d))\n  };\n};\nexport default Circles;"]},"metadata":{},"sourceType":"module"}