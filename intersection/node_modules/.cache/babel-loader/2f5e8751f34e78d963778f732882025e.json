{"ast":null,"code":"var _jsxFileName = \"/Users/marinas/WORK/GIT/ReactD3-projects/React-projects/size_matrix/src/matrix/Matrix.js\";\nimport React from 'react';\nimport { Dimensions, Scales, Axes, Square, XAxis, YAxis } from './utilities';\nimport * as R from 'ramda';\n\nconst xAxis = items => {\n  const xScaleKey = 'column';\n  const getXLabels = R.pipe(R.flatten, R.sortBy(R.prop(xScaleKey)), R.map(R.prop(xScaleKey)), R.uniq);\n  const xLabels = getXLabels(items);\n  return xLabels;\n};\n\nconst yAxis = items => {\n  const getYLabels = R.pipe(R.flatten, R.uniq);\n  const yLabels = getYLabels(items);\n  return yLabels.sort();\n};\n\nclass Matrix extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.init = (data, dims) => {\n      this.data = data; //set chart dimensions\n\n      this.dims = new Dimensions(dims); //create chart \n\n      this.chart = this.svg.append('g');\n      this.chart.attr('transform', \"translate(\".concat(this.dims.margin.left, \", \").concat(this.dims.margin.top, \")\")); //get xLabels and yLabels from data\n\n      var dsItems = this.getDatasource(this.props.data);\n      this.xLabels = xAxis(dsItems.map(row => row.map(rowItems => rowItems.items)));\n      this.yLabels = yAxis(dsItems.map(row => row.map(rowItems => rowItems.rowKey))); //set scales from data, xLabels and yLabels\n\n      this.scales = new Scales(this.xLabels, this.yLabels, this.dims); //\n\n      this.axes = new Axes(this.chart, this.scales, this.dims); // this.circles = new Circles(this.chart, this.data, this.scales);\n      // this.updateData(data);//<--- commented out; now redundant!!\n    };\n  }\n\n  renderSquare(item, className = \"square\") {\n    return React.createElement(Square, {\n      item: item,\n      className: className,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    });\n  }\n\n  renderxAxis(item, className = \"xAxis\") {\n    return React.createElement(XAxis, {\n      item: item,\n      className: className,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    });\n  }\n\n  renderyAxis(item, className = \"yAxis\") {\n    return React.createElement(YAxis, {\n      item: item,\n      className: className,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    });\n  }\n\n  getDatasource(dataRaw) {\n    return dataRaw.map(ds => ds.data);\n  }\n\n  render() {\n    var dsItems = this.getDatasource(this.props.data);\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"board-column-axis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, R.map(this.renderxAxis, yAxis(dsItems.map(row => row.map(rowItems => rowItems.rowKey))))), React.createElement(\"div\", {\n      className: \"matrix\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, dsItems.map(rowItems => rowItems.map(row => React.createElement(\"div\", {\n      className: \"board-row\",\n      key: row.uniqueId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, R.map(this.renderSquare, row.items))))), React.createElement(\"div\", {\n      className: \"board-row-axis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, this.renderSquare([], \"squareInvisible\"), R.map(this.renderxAxis, xAxis(dsItems.map(row => row.map(rowItems => rowItems.items))))));\n  }\n\n}\n\n;\nexport default Matrix;","map":{"version":3,"sources":["/Users/marinas/WORK/GIT/ReactD3-projects/React-projects/size_matrix/src/matrix/Matrix.js"],"names":["React","Dimensions","Scales","Axes","Square","XAxis","YAxis","R","xAxis","items","xScaleKey","getXLabels","pipe","flatten","sortBy","prop","map","uniq","xLabels","yAxis","getYLabels","yLabels","sort","Matrix","Component","constructor","props","init","data","dims","chart","svg","append","attr","margin","left","top","dsItems","getDatasource","row","rowItems","rowKey","scales","axes","renderSquare","item","className","renderxAxis","renderyAxis","dataRaw","ds","render","uniqueId"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Dimensions, Scales, Axes, Square , XAxis, YAxis} from './utilities';\nimport * as R from 'ramda';\n\nconst xAxis = (items) => {\n\tconst xScaleKey = 'column';\n\n\tconst getXLabels = R.pipe(\n\t\tR.flatten,\n\t\tR.sortBy(R.prop(xScaleKey)),\n\t\tR.map(R.prop(xScaleKey)),\n\t\tR.uniq\n\t\t)\n\n\tconst xLabels = getXLabels(items);\n\treturn xLabels;\n};\nconst yAxis = (items) => {\n\n\tconst getYLabels = R.pipe(\n\t\tR.flatten,\n\t\tR.uniq\n\t\t)\n\n\tconst yLabels = getYLabels(items)\n\treturn yLabels.sort();\n};\n\nclass Matrix extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t};\n\tinit=(data, dims)=>{\n\t    this.data = data;\n\t    //set chart dimensions\n\t    this.dims = new Dimensions(dims);\n\t    //create chart \n\t    this.chart = this.svg.append('g');\n\t    this.chart.attr('transform', `translate(${this.dims.margin.left}, ${this.dims.margin.top})`);\n\n\t    //get xLabels and yLabels from data\n\t    var dsItems = this.getDatasource(this.props.data)\n\t   \tthis.xLabels = xAxis(dsItems.map(row => (row.map(rowItems => (rowItems.items)))));\n\t   \tthis.yLabels = yAxis(dsItems.map(row => (row.map(rowItems => (rowItems.rowKey)))));\n\n\t    //set scales from data, xLabels and yLabels\n\t    this.scales = new Scales(this.xLabels, this.yLabels, this.dims);//\n\t    this.axes = new Axes(this.chart, this.scales, this.dims);\n\t   // this.circles = new Circles(this.chart, this.data, this.scales);\n\t  // this.updateData(data);//<--- commented out; now redundant!!\n\n\t};\n\trenderSquare(item, className=\"square\") {\n\t\treturn <Square item={item} className = {className} />;\n\t};\n\trenderxAxis(item, className=\"xAxis\") {\n\t\treturn <XAxis item={item} className = {className} />;\n\t};\n\trenderyAxis(item, className=\"yAxis\") {\n\t\treturn <YAxis item={item} className = {className} />;\n\t};\n\t\n\n\tgetDatasource(dataRaw) {\n\t\t\n\t\treturn dataRaw.map(ds => (ds.data))\n\t}\n\n\trender() {\n\t\tvar dsItems = this.getDatasource(this.props.data)\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"board-column-axis\">\n\t\t\t\t\t{ R.map(this.renderxAxis, yAxis(dsItems.map(row => (row.map(rowItems => (rowItems.rowKey))))))}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"matrix\">\n\t\t\t\t\t{\n\t\t\t\t\t\tdsItems.map(rowItems => (rowItems.map(row => (\n\t\t\t\t\t\t\t<div className=\"board-row\" key={row.uniqueId}>\n\t\t\t\t\t\t\t\t{R.map(this.renderSquare, row.items)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))))\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row-axis\">\n\t\t\t\t\t{this.renderSquare([], \"squareInvisible\")}\n\t\t\t\t\t{ R.map(this.renderxAxis, xAxis(dsItems.map(row => (row.map(rowItems => (rowItems.items))))))}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\n\t\t\n\t};\n};\nexport default Matrix;"]},"metadata":{},"sourceType":"module"}