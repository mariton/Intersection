{"ast":null,"code":"import React from 'react';\nimport { select } from 'd3-selection';\nimport { Dimensions, Scales, Axes, Circles, Square, XAxis, YAxis } from './utilities';\nimport * as R from 'ramda';\n\nconst xAxis = items => {\n  const xScaleKey = 'column';\n  const getXLabels = R.pipe(R.flatten, R.sortBy(R.prop(xScaleKey)), R.map(R.prop(xScaleKey)), R.uniq);\n  const xLabels = getXLabels(items);\n  return xLabels;\n};\n\nconst yAxis = items => {\n  const getYLabels = R.pipe(R.flatten, R.uniq);\n  const yLabels = getYLabels(items);\n  return yLabels.sort();\n};\n\nconst normalize = R.pipe(R.unnest, R.map(({\n  items,\n  rowKey\n}) => {\n  return R.map(R.assoc('rowKey', rowKey), items);\n}), R.unnest);\n\nconst getDatasource = dataRaw => {\n  return dataRaw.map(ds => ds.data);\n};\n\nclass Matrix extends React.Component {\n  constructor(domNodeCurrent, props) {\n    super(domNodeCurrent, props);\n\n    this.init = (data, dims) => {\n      this.data = data; //set chart dimensions\n\n      this.dims = new Dimensions(dims); //create chart \n\n      this.chart = this.svg.append('g');\n      this.chart.attr('transform', \"translate(\".concat(this.dims.margin.left, \", \").concat(this.dims.margin.top, \")\")); //get xLabels and yLabels from data\n\n      const dsItems = getDatasource(this.data);\n      var xLabels = xAxis(dsItems.map(row => row.map(rowItems => rowItems.items)));\n      var yLabels = yAxis(dsItems.map(row => row.map(rowItems => rowItems.rowKey)));\n      console.log(dsItems); //set scales from data, xLabels and yLabels\n\n      this.scales = new Scales(xLabels, yLabels, this.dims);\n      this.axes = new Axes(this.chart, this.scales, this.dims);\n      const circlesData = normalize(dsItems); //draw Circles/Squares of data\n\n      this.circles = new Circles(this.chart, circlesData, this.scales, this.circleColor);\n    };\n\n    this.updateData = data => {\n      this.circles.updateData(data);\n    };\n\n    this.updateDims = dims => {\n      this.dims.setDims(dims);\n      this.scales.setScales(this.data, this.dims);\n      this.axes.updateAxes(this.scales, this.dims);\n      this.circles.updateScales(this.scales);\n    };\n\n    this.svg = select(domNodeCurrent).append('svg');\n    this.svg.attr('width', '100%').attr('height', '100%');\n  }\n\n}\n\n;\nexport default Matrix;","map":{"version":3,"sources":["/Users/marinas/WORK/GIT/ReactD3-projects/React-projects/size_matrix/src/matrix/Matrix.js"],"names":["React","select","Dimensions","Scales","Axes","Circles","Square","XAxis","YAxis","R","xAxis","items","xScaleKey","getXLabels","pipe","flatten","sortBy","prop","map","uniq","xLabels","yAxis","getYLabels","yLabels","sort","normalize","unnest","rowKey","assoc","getDatasource","dataRaw","ds","data","Matrix","Component","constructor","domNodeCurrent","props","init","dims","chart","svg","append","attr","margin","left","top","dsItems","row","rowItems","console","log","scales","axes","circlesData","circles","circleColor","updateData","updateDims","setDims","setScales","updateAxes","updateScales"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { select } from 'd3-selection';\nimport { Dimensions, Scales, Axes, Circles, Square , XAxis, YAxis} from './utilities';\nimport * as R from 'ramda';\n\nconst xAxis = (items) => {\n\tconst xScaleKey = 'column';\n\n\tconst getXLabels = R.pipe(\n\t\tR.flatten,\n\t\tR.sortBy(R.prop(xScaleKey)),\n\t\tR.map(R.prop(xScaleKey)),\n\t\tR.uniq\n\t\t)\n\n\tconst xLabels = getXLabels(items);\n\treturn xLabels;\n};\nconst yAxis = (items) => {\n\n\tconst getYLabels = R.pipe(\n\t\tR.flatten,\n\t\tR.uniq\n\t\t)\n\n\tconst yLabels = getYLabels(items)\n\treturn yLabels.sort();\n};\n\nconst normalize = R.pipe(\n  R.unnest,\n  R.map(({items, rowKey}) => {\n    return R.map(R.assoc('rowKey', rowKey), items)\n  }),\n  R.unnest\n);\n\nconst getDatasource = (dataRaw) => {\n\t\treturn dataRaw.map(ds => (ds.data))\n};\n\nclass Matrix extends React.Component {\n\tconstructor(domNodeCurrent, props) {\n\t\tsuper(domNodeCurrent, props);\n\t\tthis.svg = select(domNodeCurrent).append('svg');\n    \tthis.svg.attr('width', '100%').attr('height', '100%');\n\t};\n\tinit=(data, dims)=>{\n\t    this.data = data;\n\t    \n\t    //set chart dimensions\n\t    this.dims = new Dimensions(dims);\n\t    \n\t    //create chart \n\t    this.chart = this.svg.append('g');\n\t    this.chart.attr('transform', `translate(${this.dims.margin.left}, ${this.dims.margin.top})`);\n\n\t    //get xLabels and yLabels from data\n\t    const dsItems = getDatasource(this.data);\n\t   \tvar xLabels = xAxis(dsItems.map(row => (row.map(rowItems => (rowItems.items)))));\n\t   \tvar yLabels = yAxis(dsItems.map(row => (row.map(rowItems => (rowItems.rowKey)))));\n\t   \t\n\t   \tconsole.log(dsItems);\n\n\t    //set scales from data, xLabels and yLabels\n\t    this.scales = new Scales(xLabels, yLabels, this.dims);\n\t    this.axes = new Axes(this.chart, this.scales, this.dims);\n\t    const circlesData = normalize(dsItems);\n\t \n\t    //draw Circles/Squares of data\n\t    this.circles = new Circles(this.chart, circlesData, this.scales, this.circleColor);\t  \t\n\n\t};\n\tupdateData=(data)=>{\n    \tthis.circles.updateData(data);\n  \t};\n  \tupdateDims=(dims)=>{\n\t    this.dims.setDims(dims);\n\t    this.scales.setScales(this.data, this.dims);\n\t    this.axes.updateAxes(this.scales, this.dims);\n\t    this.circles.updateScales(this.scales);\n\t };\n};\nexport default Matrix;"]},"metadata":{},"sourceType":"module"}