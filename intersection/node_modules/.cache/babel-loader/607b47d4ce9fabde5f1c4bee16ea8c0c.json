{"ast":null,"code":"import React from 'react';\nimport { Circles, Intersection, Dimensions } from './utilities';\nimport { defaultColor } from './functions';\n\nclass Legend extends React.Component {\n  constructor(chart, options, dims, data, scales) {\n    super(chart, options);\n\n    this.setPosition = () => {\n      let legendPosition = new Dimensions(this.dimLegend);\n\n      if (this.options.position.toLowerCase() === 'right' && this.options.align.toLowerCase() === 'bottom') {\n        legendPosition.innerWidth = this.dims.innerWidth;\n        legendPosition.innerHeight = this.dims.innerHeight;\n      } else if (this.options.position.toLowerCase() === 'right' && this.options.align.toLowerCase() === 'top') {\n        legendPosition.innerWidth = this.dims.innerWidth;\n        legendPosition.innerHeight = this.dimLegend.height;\n      } else {\n        legendPosition.innerWidth = this.dims.innerWidth;\n        legendPosition.innerHeight = this.dims.innerHeight;\n      } //need to translate charts (0,0) position for the left positioning\n      // else if ((this.options.position.toLowerCase() == 'left') && (this.options.align.toLowerCase() == 'bottom'))\n      // {\n      // \tlegendPosition.innerWidth = -this.dimLegend.width;\n      // \tlegendPosition.innerHeight = this.dims.innerHeight;\n      // }\n\n\n      return legendPosition;\n    };\n\n    this.updateData = newData => {\n      this.data = newData;\n      this.allLegend = this.legend.selectAll('.legendCircle').data(this.data);\n      this.allLegend.attr('cx', d => {\n        return 10;\n      }).attr('cy', (d, i) => {\n        return -this.dimLegend.height + 20 * (i + 1);\n      }).attr('fill', d => d.color);\n      this.enter();\n    };\n\n    this.enter = () => {\n      this.allLegend.enter().append('circle').attr('class', 'legendCircle').attr('cx', d => {\n        return 10;\n      }).attr('cy', (d, i) => {\n        return -this.dimLegend.height + 20 * (i + 1);\n      }).attr('r', d => 7).attr('fill', d => {\n        return d.color;\n      }).attr(\"opacity\", 0.8);\n      this.allLegend.enter().append('text').text(d => {\n        return d[this.options.category];\n      }).attr('x', 20).attr('y', (d, i) => {\n        return -this.dimLegend.height + 20 * (i + 1) + 3;\n      }).attr('class', 'legendText');\n      this.exit();\n    };\n\n    this.exit = () => {\n      this.allLegend.exit().remove();\n    };\n\n    this.chart = chart;\n    this.options = options;\n    this.dims = dims;\n    this.scales = scales;\n    this.dimLegend = new Dimensions({\n      width: this.options.width,\n      height: this.options.height\n    }); //Set position for Legend, only right with top and bottom alignment\n\n    var _legendPosition = this.setPosition(); //Create G group for Legend\n\n\n    this.legend = this.chart.append('g').attr('transform', \"translate(\".concat(_legendPosition.innerWidth, \", \").concat(_legendPosition.innerHeight, \")\")).attr('class', 'legend').style('width', this.options.width).style('height', this.options.height).style('float', 'left'); //Add legend Title\t\n\n    this.legend.append('text').text(this.options.title).attr('x', 5).attr('y', -this.dimLegend.height).attr('class', 'legendTitle'); //Add Matrix Intersection mark to legend\n\n    var legendIntersectionObj = {};\n    legendIntersectionObj[this.options.category] = this.options.labelIntersection;\n    legendIntersectionObj['color'] = defaultColor(this.options.colorIntersection).intersection;\n    if (this.options.showIntersection) data.push(legendIntersectionObj);\n    this.updateData(data);\n  }\n\n}\n\nexport default Legend;","map":{"version":3,"sources":["/Users/marinas/WORK/GIT/ReactD3-projects/React-projects/size_matrix/src/matrix/Legend.js"],"names":["React","Circles","Intersection","Dimensions","defaultColor","Legend","Component","constructor","chart","options","dims","data","scales","setPosition","legendPosition","dimLegend","position","toLowerCase","align","innerWidth","innerHeight","height","updateData","newData","allLegend","legend","selectAll","attr","d","i","color","enter","append","text","category","exit","remove","width","style","title","legendIntersectionObj","labelIntersection","colorIntersection","intersection","showIntersection","push"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Circles, Intersection, Dimensions } from './utilities';\nimport { defaultColor}  from './functions';\n\nclass Legend extends React.Component{\n\tconstructor(chart, options, dims, data, scales) {\n\t\tsuper(chart, options);\n\t\tthis.chart = chart;\n\t\tthis.options = options;\n\t\tthis.dims = dims;\n\t\tthis.scales = scales;\n\t\tthis.dimLegend = new Dimensions({width:this.options.width, height:this.options.height});\n\n\t\t//Set position for Legend, only right with top and bottom alignment\n\t\tvar legendPosition = this.setPosition();\n\n\t\t//Create G group for Legend\n\t\tthis.legend = this.chart.append('g').attr('transform', `translate(${legendPosition.innerWidth}, ${legendPosition.innerHeight})`)\n\t\t\t.attr('class', 'legend')\n\t\t\t.style('width', this.options.width)\n\t\t\t.style('height', this.options.height)\n\t\t\t.style('float', 'left');\n\n\t\t//Add legend Title\t\n\t\tthis.legend.append('text')\n\t        .text(this.options.title)\n\t        .attr('x', 5)\n\t        .attr('y', -(this.dimLegend.height))\n\t        .attr('class', 'legendTitle');\n\n\n\t    //Add Matrix Intersection mark to legend\n\t\tvar legendIntersectionObj ={};\n\t\tlegendIntersectionObj[this.options.category] = this.options.labelIntersection;\n\t\tlegendIntersectionObj['color'] = defaultColor(this.options.colorIntersection).intersection;\n\t\t\n\t\tif (this.options.showIntersection)\n\t\t\tdata.push(legendIntersectionObj);\n\t\tthis.updateData(data);\n\t};\n\n\n\tsetPosition = () =>{\n\t\tlet legendPosition = new Dimensions(this.dimLegend);\n\t\tif ((this.options.position.toLowerCase() === 'right') && (this.options.align.toLowerCase() === 'bottom'))\n\t\t{\n\t\t\tlegendPosition.innerWidth = this.dims.innerWidth;\n\t\t\tlegendPosition.innerHeight = this.dims.innerHeight;\n\t\t}\n\t\telse if ((this.options.position.toLowerCase() === 'right') && (this.options.align.toLowerCase() === 'top'))\n\t\t{\n\t\t\tlegendPosition.innerWidth = this.dims.innerWidth;\n\t\t\tlegendPosition.innerHeight = this.dimLegend.height;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlegendPosition.innerWidth = this.dims.innerWidth;\n\t\t\tlegendPosition.innerHeight = this.dims.innerHeight;\n\n\t\t}\n\t\t//need to translate charts (0,0) position for the left positioning\n\t\t// else if ((this.options.position.toLowerCase() == 'left') && (this.options.align.toLowerCase() == 'bottom'))\n\t\t// {\n\t\t// \tlegendPosition.innerWidth = -this.dimLegend.width;\n\t\t// \tlegendPosition.innerHeight = this.dims.innerHeight;\n\t\t// }\n\t\treturn legendPosition;\n\t};\n\n\tupdateData = (newData) => {\n\t\tthis.data = newData;\n\n\t\tthis.allLegend = this.legend.selectAll('.legendCircle').data(this.data);\n\t\tthis.allLegend\n\t        .attr('cx', (d) => {return 10})\n\t        .attr('cy', (d,i) => {return -this.dimLegend.height + 20 * (i+1)})\n\t        .attr('fill', (d) => d.color)\n   \t\tthis.enter();\n\t};\n\n\tenter = () => {\n\t\t\n\t\tthis.allLegend.enter()\n\t        .append('circle')\n\t        .attr('class', 'legendCircle')\n\t        .attr('cx', (d)=> {return 10})\n\t        .attr('cy', (d, i)=>{return -this.dimLegend.height+ 20*(i+1) })\n\t        .attr('r', (d) => 7)\n\t        .attr('fill', (d) => {return d.color})\n\t        .attr(\"opacity\", 0.8);\n\n\t    this.allLegend.enter().append('text')\n\t        .text((d) => {return d[this.options.category];})\n\t        .attr('x', 20)\n\t        .attr('y', (d, i)=>{return -this.dimLegend.height + 20*(i+1) + 3})\n\t        .attr('class', 'legendText');\n\n        this.exit();\n\t};\n\texit=()=>{\n\t    this.allLegend.exit().remove();\n\t};\n\n}\n\nexport default Legend;"]},"metadata":{},"sourceType":"module"}